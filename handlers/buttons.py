from copy import deepcopy
from datetime import datetime, timedelta

import telegram
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import ConversationHandler, CallbackQueryHandler, MessageHandler, Filters

from res.coinbase_func import create_coinbase_address, get_coinbase_address_id, get_coinbase_address, \
    get_transactions_list, get_coinbase_balance
from res.const import e_briefcase, e_money_bag, e_dollar_banknote, e_info, \
    e_policeman, e_smiling, PAGE_INDEX, \
    e_winking, back_for_button, SELECT_ID, url_support, min_guarantee, e_handshake, DATA, \
    e_wrench, e_stop_sign, e_credit_card, CATEGORY_INFO, CATEGORY_PRODS, SELECT_PROD_ID, PRODUCT_SUM_PRICE, \
    PRODUCT_LTC_SUM_PRICE, PRODUCT_COUNT, commission_per_deals, DEAL_ID, SELECT_REQUISITE_ID, SELECT_SALE_SECTION, \
    CATEGORY_SERVICES, SELECT_SERV_ID, SELECT_SERV_PACKET, CLIENT_SEND_TZ, ORDER_ID, e_like, e_dislike, \
    SELECT_BUYS_SECTION, e_star, e_page, e_cross_mark, e_pencil, e_shopping_bags
from res.func import get_user_obj, add_user, get_shop_request_obj, add_new_shop, delete_req_open_shop, \
    get_shop_info_text, get_shop_obj, shop_unban, shop_ban, user_unban, get_user_info_text, user_ban, \
    get_sum_new_transactions, add_user_balance, get_myshop_finance_text, \
    get_guarantee_shop, get_requisite_info, delete_shop_requisite, get_subcat_btnlist_by_catid, \
    get_cat_my_products_tree, \
    get_product_info, product_del, get_cat_products_shop_tree, get_cat_products_tree, \
    get_requisite_list, get_product_by_id, get_user_balance, add_deal, get_product_content_bytes, get_deal_info, \
    get_buyer_deal_menu, get_deal_by_id, add_shop_balance, get_shop_check_time, get_shop_deal_menu, \
    get_requisite_by_id, get_shop_two_comments, count_open_buys, \
    get_shop_dispute_deals_count, get_shop_open_deals_count, \
    get_shop_close_deals_count, get_user_dispute_deals_count, get_user_open_deals_count, get_user_close_deals_count, \
    get_user_id, moders_alert, get_deal_messages, get_user_tg_id, \
    get_subcat_service_btnlist_by_catid, get_cat_my_services_tree, get_service_info, get_service_picture_id, \
    get_my_service_packets_menu, get_service_by_id, get_cat_services_shop_tree, check_moderator, get_cat_services_tree, \
    get_ltc_by_rub, count_open_deals, get_order_info, get_order_by_id, get_client_order_menu, get_shop_order_menu, \
    count_open_cl_orders, get_shop_name, get_order_messages, get_shop_id, get_user_dispute_orders_count, \
    get_user_open_orders_count, get_user_close_orders_count, get_shop_dispute_orders_count, get_shop_open_orders_count, \
    get_shop_close_orders_count, get_user_name, get_moder_select_shop_menu, \
    get_sum_shop_deal_rating, get_count_likes_deal, get_count_dislikes_deal, int_r, get_shop_defeat_dispute, \
    get_shop_successful_deals, check_shop_owner, shop_stop, check_shop_stop, count_open_sh_orders, get_users_balance, \
    get_shops_balance, get_shops_guarantee, get_shops_freeze_guarantee, get_users_count
from res.func import get_money_balance, show_list_menu, update_main_menu, show_list_text
from res.menu import about_service_menu, my_shop_menu, moderator_menu, main_menu, \
    up_balance_menu, dashboard_menu, request_open_shop_menu, shop_moder_menu, \
    shop_moder_requests_approved_menu, \
    moder_select_user_menu, balance_menu, \
    moder_find_user_menu, shop_moder_find_menu, my_shop_setting_stop_confirmation, my_shop_finance_withdrawal, \
    my_shop_finance_guarantee, my_shop_submenu_finance, my_shop_finance_guarantee_up_menu, \
    my_shop_finance_requisites, my_shop_finance_requisites_select_menu, my_shop_finance_requisites_select_edit_menu, \
    my_shop_submenu_products, my_shop_submenu_products_prod_menu, my_shop_product_edit_menu, \
    my_shop_products_prod_del_accept, market_select_prod_menu, select_market_section, \
    get_submenu_trades, moder_select_call_menu, moder_select_call_menu_messages, my_shop_submenu_services, \
    my_shop_select_service_menu, my_shop_select_service_menu_edit, my_shop_service_edit_packet, select_comments_section, \
    market_select_service_menu, select_section_calls, moder_select_call_order_menu, \
    moder_select_call_order_menu_messages, get_my_shop_submenu_settings

# =================================================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø =====================================================
# –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
from res.schemas import ProductCategory, Product, ServiceCategory, Service


def button_user_agree(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if get_user_obj(chat_id):
        return
    username = query.message.chat.username
    first_name = query.message.chat.first_name
    if username is None:
        return update.callback_query.edit_message_text(
            f'–î–æ–±–∞–≤—å—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –≤–≤–µ–¥–∏—Ç–µ "/start"! \n\n',
            parse_mode='HTML')
    add_user(chat_id, username, first_name)
    update.callback_query.edit_message_text(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ —Å–µ—Ä–≤–∏—Å–µ! {e_smiling}\n\n',
                                            parse_mode='HTML')
    context.bot.sendMessage(chat_id, f'–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å —Ä–∞–∑–¥–µ–ª <b>\'–û —Å–µ—Ä–≤–∏—Å–µ\'</b>',
                            reply_markup=main_menu, parse_mode='HTML')


# =================================================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ =====================================================
def button_market_handler(update, context):
    chat_id = update.message.chat_id
    context.bot.sendMessage(chat_id, f"<b>üõí  –†—ã–Ω–æ–∫</b>\n\n"
                                     f"<i>üì¶  –¢–æ–≤–∞—Ä—ã</i> -  –¥–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ–∫–∞–∂–µ—Ç –≤–∞–º –º–∞–≥–∞–∑–∏–Ω—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –≤–∞—à–µ–π –æ–Ω–ª–∞–π–Ω –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –∫–∞–∫–∏–º–∏-—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏.\n\n"
                                     f"<i>ü§ù  –£—Å–ª—É–≥–∏</i> - –¥–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª —è–≤–ª—è–µ—Ç—Å—è —Å–≤–æ–µ–≥–æ —Ä–æ–¥–∞ —Ñ—Ä–∏–ª–∞–Ω—Å –±–∏—Ä–∂–µ–π, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ª—é–±–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–∞ –≤–∞—à –≤–∫—É—Å.\n\n"
                                     f"‚ö†  –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞, –Ω–∞—Ä—É—à–µ–Ω–∏—è "
                                     f"—ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –±–µ–∑ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤.\n\n"
                                     f"<b>‚ùì  –ö–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>\n\n"
                                     f"üì¶  –¢–æ–≤–∞—Ä—ã –∏–ª–∏  ü§ù  –£—Å–ª—É–≥–∏?",
                            reply_markup=InlineKeyboardMarkup(select_market_section,
                                                              resize_keyboard=True),
                            parse_mode='HTML')


def button_select_market_section_products(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    context.user_data[CATEGORY_PRODS] = []
    context.user_data[CATEGORY_INFO] = {}
    get_cat_products_tree(context, update, chat_id)
    context.user_data[DATA] = 'for_user'
    update.callback_query.edit_message_text(f"<b>üì¶ –¢–æ–≤–∞—Ä—ã</b>\n\n"
                                            "üìÇ –í—ã –≤–∏–¥–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–∞ —Ä—ã–Ω–∫–µ.\n\n"
                                            "‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞, –Ω–∞—Ä—É—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –±–µ–∑ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤.\n\n"
                                            "‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:</b>",
                                            reply_markup=InlineKeyboardMarkup(
                                                get_subcat_btnlist_by_catid(context, None, context.user_data[DATA],
                                                                            chat_id),
                                                resize_keyboard=True),
                                            parse_mode='HTML')


def button_dashboard_handler(update, context):
    chat_id = update.message.chat_id
    user = get_user_obj(chat_id)
    balance = user.balance
    if balance is None:
        return update.message.reply_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥: notbalance')
    money_balance = get_money_balance(balance)
    update.message.reply_text(f'{e_briefcase}   <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n'
                              f'<b>–í–∞—à ID:</b> {user.user_id}\n\n'
                              f'{e_money_bag}\t\t<b>–ë–∞–ª–∞–Ω—Å</b>\n\t\t<i>{round(balance, 8)}</i>\t\tLITECOIN\n\n'
                              f'{e_dollar_banknote}\t\t<b>–í –≤–∞–ª—é—Ç–µ</b>\n'
                              f'\t\t<i>{round(money_balance[0], 2)}</i>\t\tUSD\n'
                              f'\t\t<i>{round(money_balance[1], 2)}</i>\t\tRUB'
                              f'\n\n<b>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫:</b>\n'
                              f'\t\t–°–¥–µ–ª–∫–∏ (—Ç–æ–≤–∞—Ä—ã) - <i>{count_open_buys(chat_id)}</i>\n'
                              f'\t\t–ó–∞–∫–∞–∑—ã (—É—Å–ª—É–≥–∏) - <i>{count_open_cl_orders(chat_id)}</i>',
                              reply_markup=InlineKeyboardMarkup(dashboard_menu, resize_keyboard=True),
                              parse_mode='HTML')


def button_settings_handler(update, context):
    update.message.reply_text(f'{e_wrench}   <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n'
                              f'\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫', parse_mode='HTML')


def button_about_handler(update, context):
    update.message.reply_text(f'{e_info}   <b>–û —Å–µ—Ä–≤–∏—Å–µ</b>\n\n'
                              f'–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ',
                              reply_markup=InlineKeyboardMarkup(about_service_menu, resize_keyboard=True),
                              parse_mode='HTML')


# ========================================= –†–´–ù–û–ö ======================================================
# -------------------- –¢–û–í–ê–†–´ -----------------------------
def button_payment_shop_requisites_list(update, context):
    query = update.callback_query
    query.answer()
    product_id = context.user_data[SELECT_PROD_ID]
    product = get_product_by_id(product_id)
    owner_id = product.owner_id
    update.callback_query.edit_message_text(f"   <b>–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                                            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç –ú–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏",
                                            reply_markup=InlineKeyboardMarkup(
                                                get_requisite_list(update, context, owner_id),
                                                resize_keyboard=True), parse_mode="HTML")


def button_payment_for_litecoin(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if not SELECT_PROD_ID in context.user_data or PRODUCT_SUM_PRICE not in context.user_data or PRODUCT_LTC_SUM_PRICE not in context.user_data or PRODUCT_COUNT not in context.user_data or CATEGORY_INFO not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    user_balance = get_user_balance(chat_id)
    sum_ltc_price = context.user_data[PRODUCT_LTC_SUM_PRICE]
    if user_balance < sum_ltc_price:
        context.bot.sendMessage(chat_id, f"   <b>–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ LITECOIN –Ω–∞ –±–∞–ª–∞–Ω—Å–µ\n"
                                         f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –Ω–∞ <b> {sum_ltc_price - user_balance} LTC </b>",
                                parse_mode="HTML")
        return
    product_id = context.user_data[SELECT_PROD_ID]
    product = get_product_by_id(product_id)
    count = context.user_data[PRODUCT_COUNT]
    if product.count < count:
        context.bot.sendMessage(chat_id, f"   <b>–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n",
                                parse_mode="HTML")
        return
    owner_id = product.owner_id
    sum_price = context.user_data[PRODUCT_SUM_PRICE]
    category = context.user_data[CATEGORY_INFO]['cat_path']
    if product.count - count == 0:
        context.bot.sendMessage(product.owner_id, f"   <b>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ç–æ–≤–∞—Ä</b>\n\n"
                                                  f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                                                  f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}",
                                parse_mode="HTML")
    content_bytes = get_product_content_bytes(product_id, count)
    add_user_balance(chat_id, -sum_ltc_price)
    deal = add_deal(owner_id, chat_id, product_id, category, sum_price, "LITECOIN", sum_ltc_price, count, None, 1)
    check_time = get_shop_check_time(owner_id)
    deal_info = get_deal_info(
        deal.id) + f"\n‚Äº  –£ –≤–∞—Å *{int(check_time / 60)} –º–∏–Ω—É—Ç* —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å–¥–µ–ª–∫–∞ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n" \
                   "‚Äº  –ï—Å–ª–∏ —Å —Ç–æ–≤–∞—Ä–æ–º –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –Ω–∞–∂–º–∏—Ç–µ *–æ—Ç–∫—Ä—ã—Ç—å –î–∏—Å–ø—É—Ç*\n\n" \
                   "üîî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ:\n" \
                   "\t\t\t\t*'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ -> –¢–æ–≤–∞—Ä—ã'*"
    update.callback_query.edit_message_text(
        deal_info,
        reply_markup=InlineKeyboardMarkup(get_buyer_deal_menu(deal, deal.status, context),
                                          resize_keyboard=True),
        parse_mode=telegram.ParseMode.MARKDOWN)
    message = context.bot.sendDocument(chat_id, content_bytes, f"{deal.id}.{count}.txt",
                                       caption=f"–í—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ [{count} —à—Ç.]")
    file_id = message.document.file_id
    deal.update(file_id=file_id)
    context.user_data[DEAL_ID] = deal.id
    job_context = f"{chat_id}|{deal.id}"
    new_job = context.job_queue.run_repeating(check_deal_status, check_time, context=job_context)
    context.chat_data['job'] = new_job


def check_deal_status(context):
    job = context.job
    job_context = job.context.split('|')
    chat_id = job_context[0]
    deal_id = job_context[1]
    deal = get_deal_by_id(deal_id)
    if deal.status == 1:
        deal.update(status=3, messages=None)
        deal_info = get_deal_info(
            deal_id) + "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n*–ü–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –ú–∞–≥–∞–∑–∏–Ω–µ*"
        menu = get_buyer_deal_menu(deal, 3, context)
        menu.pop(0)
        context.bot.sendMessage(chat_id,
                                deal_info,
                                reply_markup=InlineKeyboardMarkup(menu,
                                                                  resize_keyboard=True),
                                parse_mode=telegram.ParseMode.MARKDOWN)
        if deal.payment_method == 'LITECOIN':
            add_shop_balance(deal.shop_id, deal.sum_price_ltc - (deal.sum_price_ltc * commission_per_deals))
            deal_info = get_deal_info(
                deal_id) + "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n*–î–∞–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∞ LITECOIN —Å—á—ë—Ç –ú–∞–≥–∞–∑–∏–Ω–∞*"
        else:
            deal_info = get_deal_info(deal_id) + "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n*–î–∞–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*"
        context.bot.sendMessage(deal.shop_id,
                                deal_info,
                                reply_markup=InlineKeyboardMarkup(get_shop_deal_menu(3, deal, context),
                                                                  resize_keyboard=True),
                                parse_mode=telegram.ParseMode.MARKDOWN)
    job.schedule_removal()


def button_deal_buyer_close(update, context, deal_id):
    query = update.callback_query
    query.answer()
    deal = get_deal_by_id(deal_id)
    if not deal:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    if deal.status == 1 or deal.status == 2:
        deal.update(status=3, messages=None)
        deal_info_get = get_deal_info(deal_id)
        deal_info = deal_info_get + f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n_–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–¥–µ–ª–∫—É, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –ú–∞–≥–∞–∑–∏–Ω–µ {e_smiling}_"
        menu = get_buyer_deal_menu(deal, 3, context)
        menu.pop(0)
        update.callback_query.edit_message_text(
            deal_info,
            reply_markup=InlineKeyboardMarkup(menu,
                                              resize_keyboard=True),
            parse_mode=telegram.ParseMode.MARKDOWN)
        if deal.payment_method == 'LITECOIN':
            add_shop_balance(deal.shop_id, deal.sum_price_ltc - (deal.sum_price_ltc * commission_per_deals))
            deal_info = deal_info_get + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n_–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É, —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∞ LITECOIN —Å—á—ë—Ç –ú–∞–≥–∞–∑–∏–Ω–∞_"
        else:
            deal_info = deal_info_get + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n_–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É, –≥–∞—Ä–∞–Ω—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω_"
            shop = get_shop_obj(deal.shop_id)
            shop.update(freeze_guarantee=shop.freeze_guarantee - deal.sum_price_ltc,
                        guarantee=shop.guarantee + (deal.sum_price_ltc - (deal.sum_price_ltc * commission_per_deals)))
        context.bot.sendMessage(deal.shop_id,
                                deal_info,
                                reply_markup=InlineKeyboardMarkup(get_shop_deal_menu(3, deal, context),
                                                                  resize_keyboard=True),
                                parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        return update.callback_query.edit_message_text("üîî  –°—Ç–∞—Ç—É—Å —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!\n\n–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n"
                                                       "\t\t\t\t<b>'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ -> –¢–æ–≤–∞—Ä—ã'</b>\n\n"
                                                       "–ò –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –ø–æ–∫—É–ø–∫—É", parse_mode='HTML')


def button_deal_buyer_dispute(update, context, deal_id):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    deal = get_deal_by_id(deal_id)
    if not deal:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    if deal.status == 1:
        deal.update(status=2)
        deal_info = get_deal_info(
            deal.id) + f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –î–∏—Å–ø—É—Ç —Å _–ú–∞–≥–∞–∑–∏–Ω–æ–º_. –†–µ—à–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n" \
                       f"–ß–µ—Ä–µ–∑ *30 –º–∏–Ω—É—Ç* –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å *–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞*, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–∞\n\n" \
                       "üîî  –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ:\n" \
                       "\t\t\t\t*'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ -> –¢–æ–≤–∞—Ä—ã'*"
        update.callback_query.edit_message_text(
            deal_info,
            reply_markup=InlineKeyboardMarkup(get_buyer_deal_menu(deal, 2, context),
                                              resize_keyboard=True),
            parse_mode=telegram.ParseMode.MARKDOWN)
        deal_info = get_deal_info(
            deal.id) + f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –î–∏—Å–ø—É—Ç —Å –í–∞—à–∏–º –º–∞–≥–∞–∑–∏–Ω–æ–º\n\n–†–µ—à–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n" \
                       f"–°–¥–µ–ª–∞–π—Ç–µ –∑–∞–º–µ–Ω—É —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –æ–∫–∞–∑–∞–ª—Å—è *–Ω–µ –≤–∞–ª–∏–¥–Ω—ã–º*!\n\n" \
                       f"–ß–µ—Ä–µ–∑ *30 –º–∏–Ω—É—Ç* –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å *–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞*, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–∞\n\n" \
                       "–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –ü—Ä–æ–¥–∞–∂–∞–º–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ:\n" \
                       "\t\t\t\t*'–ú–æ–π –º–∞–≥–∞–∑–∏–Ω -> –ü—Ä–æ–¥–∞–∂–∏'*"
        context.bot.sendMessage(deal.shop_id,
                                deal_info,
                                reply_markup=InlineKeyboardMarkup(get_shop_deal_menu(2, deal, context),
                                                                  resize_keyboard=True),
                                parse_mode=telegram.ParseMode.MARKDOWN)
        job_context = f"{chat_id}|{deal.id}"
        new_job = context.job_queue.run_repeating(call_moder_add, 1800, context=job_context)
        context.chat_data['job'] = new_job
    else:
        return update.callback_query.edit_message_text("üîî  –°—Ç–∞—Ç—É—Å —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!\n\n–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n"
                                                       "\t\t\t\t<b>'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ -> –¢–æ–≤–∞—Ä—ã'</b>\n\n"
                                                       "–ò –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –ø–æ–∫—É–ø–∫—É", parse_mode='HTML')


def call_moder_add(context):
    job = context.job
    job_context = job.context.split('|')
    chat_id = job_context[0]
    deal_id = job_context[1]
    deal = get_deal_by_id(deal_id)
    if deal.status == 2:
        deal_info = get_deal_info(deal_id) + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n*–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏*"
        deal.update(potential=True)
        deal = get_deal_by_id(deal_id)
        buyer_menu = get_buyer_deal_menu(deal, deal.status, context)
        context.bot.sendMessage(chat_id,
                                deal_info,
                                reply_markup=InlineKeyboardMarkup(buyer_menu,
                                                                  resize_keyboard=True),
                                parse_mode=telegram.ParseMode.MARKDOWN)
    job.schedule_removal()


def button_deal_buyer_get_product(update, context):
    if DEAL_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    deal_id = context.user_data[DEAL_ID]
    deal = get_deal_by_id(deal_id)
    context.bot.sendDocument(chat_id, deal.file_id, f"{deal.shop_id}.{deal.count} —à—Ç.txt",
                             caption=f"–í—ã–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä [{deal.count} —à—Ç.]")
    if deal.change_file_id is not None and deal.change_count is not None:
        context.bot.sendDocument(chat_id, deal.file_id, f"{deal.shop_id}.{deal.change_count} —à—Ç.txt",
                                 caption=f"–ó–∞–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ [{deal.change_count} —à—Ç.]")


def button_requisite_payment_select(update, context):
    query = update.callback_query
    query.answer()
    requisite_id = query.data[25:]
    chat_id = query.message.chat.id
    context.user_data[SELECT_REQUISITE_ID] = requisite_id
    if not SELECT_PROD_ID in context.user_data or PRODUCT_SUM_PRICE not in context.user_data or PRODUCT_LTC_SUM_PRICE not in context.user_data or PRODUCT_COUNT not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    product_id = context.user_data[SELECT_PROD_ID]
    product = get_product_by_id(product_id)
    owner_id = product.owner_id
    sum_price = context.user_data[PRODUCT_SUM_PRICE]
    sum_ltc_price = context.user_data[PRODUCT_LTC_SUM_PRICE]
    category = context.user_data[CATEGORY_INFO]['cat_path']
    count = context.user_data[PRODUCT_COUNT]
    requisite = get_requisite_by_id(requisite_id)
    requisite_text = requisite.payment_system + f"  ({requisite.account_number})"
    deal = add_deal(owner_id, chat_id, product_id, category, sum_price, requisite_text, sum_ltc_price, count, None, 0)
    deal_info = get_deal_info(
        deal.id) + f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–£ –≤–∞—Å –µ—Å—Ç—å *15 –º–∏–Ω—É—Ç* —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É\n\n" \
                   "–ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –ø–æ—Å–ª–µ–¥—É–µ—Ç, —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –ø–æ–∫—É–ø–∫–∞ *–±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n" \
                   "üîî–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ:\n" \
                   "\t\t\t\t*'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ -> –¢–æ–≤–∞—Ä—ã'*"
    shop = get_shop_obj(owner_id)
    shop.update(freeze_guarantee=shop.freeze_guarantee + deal.sum_price_ltc,
                guarantee=shop.guarantee - deal.sum_price_ltc)
    update.callback_query.edit_message_text(
        deal_info,
        reply_markup=InlineKeyboardMarkup(get_buyer_deal_menu(deal, deal.status, context),
                                          resize_keyboard=True),
        parse_mode=telegram.ParseMode.MARKDOWN)
    context.user_data[DEAL_ID] = deal.id
    job_context = f"{chat_id}|{deal.id}"
    new_job = context.job_queue.run_repeating(check_proof_payment, 900, context=job_context)
    context.chat_data['job'] = new_job


def check_proof_payment(context):
    job = context.job
    job_context = job.context.split('|')
    chat_id = job_context[0]
    deal_id = job_context[1]
    deal = get_deal_by_id(deal_id)
    if not deal.proof_payment:
        deal_info = get_deal_info(deal_id) + \
                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n*–ü–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É*"
        shop = get_shop_obj(deal.shop_id)
        shop.update(freeze_guarantee=shop.freeze_guarantee - deal.sum_price_ltc,
                    guarantee=shop.guarantee + deal.sum_price_ltc)
        context.bot.sendMessage(chat_id,
                                deal_info,
                                parse_mode=telegram.ParseMode.MARKDOWN)
        deal.delete()
    job.schedule_removal()


def button_deal_buyer_cancel(update, context, deal_id):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    deal = get_deal_by_id(deal_id)
    if not deal:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    if deal.status != 0:
        return update.callback_query.edit_message_text("üîî  –°—Ç–∞—Ç—É—Å —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!\n\n–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n"
                                                       "\t\t\t\t<b>'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ -> –¢–æ–≤–∞—Ä—ã'</b>\n\n"
                                                       "–ò –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –ø–æ–∫—É–ø–∫—É", parse_mode='HTML')
    deal_info = get_deal_info(deal_id) + \
                "\n*–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—É—é –ø–æ–∫—É–ø–∫—É*"
    context.bot.sendMessage(chat_id,
                            deal_info,
                            parse_mode=telegram.ParseMode.MARKDOWN)
    shop = get_shop_obj(deal.shop_id)
    shop.update(freeze_guarantee=shop.freeze_guarantee - deal.sum_price_ltc,
                guarantee=shop.guarantee + deal.sum_price_ltc)

    deal.delete()
    if 'job' in context.chat_data:
        old_job = context.chat_data['job']
        old_job.schedule_removal()


def button_deal_buyer_confirm_payment(update, context, deal_id):
    query = update.callback_query
    query.answer()
    deal = get_deal_by_id(deal_id)
    if not deal:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    if deal.status == 0:
        deal.update(proof_payment=True)
        deal_info = get_deal_info(
            deal.id) + f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n_–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –í–∞–º–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º_\n\n" \
                       "üîî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ:\n" \
                       "\t\t\t\t*'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' -> '–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏'*"
        update.callback_query.edit_message_text(
            deal_info,
            parse_mode=telegram.ParseMode.MARKDOWN)
        deal_info = get_deal_info(
            deal.id) + f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n\n" \
                       f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –∏ *–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ* –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤!"
        context.bot.sendMessage(deal.shop_id,
                                deal_info,
                                reply_markup=InlineKeyboardMarkup(get_shop_deal_menu(0, deal, context),
                                                                  resize_keyboard=True),
                                parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        return update.callback_query.edit_message_text("üîî  –°—Ç–∞—Ç—É—Å —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!\n\n–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n"
                                                       "\t\t\t\t<b>'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ -> –¢–æ–≤–∞—Ä—ã'</b>\n\n"
                                                       "–ò –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –ø–æ–∫—É–ø–∫—É", parse_mode='HTML')


def button_deal_shop_confirm_payment(update, context, deal_id):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    deal = get_deal_by_id(deal_id)
    if deal is None:
        return update.callback_query.edit_message_text("<b>–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n",
                                                       parse_mode='HTML')
    buyer_id = deal.buyer_id
    product = get_product_by_id(deal.product_id)
    deal_info_get = get_deal_info(deal_id)
    if product.count < deal.count:
        deal_info = deal_info_get + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n*–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤—ã–¥–∞—á–∏! –°—Ä–æ—á–Ω–æ –ø–æ–ø–æ–ª–∏–Ω—Ç–µ —Ç–æ–≤–∞—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –µ—â—ë —Ä–∞–∑!*"
        update.callback_query.edit_message_text(
            deal_info, reply_markup=InlineKeyboardMarkup(get_buyer_deal_menu(deal, deal.status, context),
                                                         resize_keyboard=True),
            parse_mode=telegram.ParseMode.MARKDOWN)

        deal_info = deal_info_get + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n*–£ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤—ã–¥–∞—á–∏!*"
        context.bot.sendMessage(buyer_id,
                                deal_info,
                                reply_markup=InlineKeyboardMarkup(get_buyer_deal_menu(deal, deal.status, context),
                                                                  resize_keyboard=True),
                                parse_mode=telegram.ParseMode.MARKDOWN)
        return
    if deal.status != 0:
        return update.callback_query.edit_message_text("üîî  –°—Ç–∞—Ç—É—Å —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!\n\n–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n"
                                                       "\t\t\t\t<b>'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ -> –¢–æ–≤–∞—Ä—ã'</b>\n\n"
                                                       "–ò –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –ø–æ–∫—É–ø–∫—É", parse_mode='HTML')
    if not deal.proof_payment:
        return update.callback_query.edit_message_text("<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É</b>\n",
                                                       parse_mode='HTML')
    if product.count - deal.count == 0:
        context.bot.sendMessage(product.owner_id, f"   <b>–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ç–æ–≤–∞—Ä</b>\n"
                                                  f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}",
                                parse_mode="HTML")
    content_bytes = get_product_content_bytes(deal.product_id, deal.count)
    check_time = get_shop_check_time(owner_id)
    deal_info = deal_info_get + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤. *–¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é!*"
    update.callback_query.edit_message_text(
        deal_info,
        parse_mode=telegram.ParseMode.MARKDOWN)

    deal_info = deal_info_get + f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n–£ –≤–∞—Å –µ—Å—Ç—å *{int(check_time / 60)} –º–∏–Ω—É—Ç* —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–∫—É–ø–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n" \
                                "‚Äº  –ï—Å–ª–∏ —Å —Ç–æ–≤–∞—Ä–æ–º –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –Ω–∞–∂–º–∏—Ç–µ *–æ—Ç–∫—Ä—ã—Ç—å –î–∏—Å–ø—É—Ç*\n\n" \
                                "üîî–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ:\n" \
                                "\t\t\t\t*'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ -> –¢–æ–≤–∞—Ä—ã'*"
    context.bot.sendMessage(buyer_id,
                            deal_info,
                            reply_markup=InlineKeyboardMarkup(get_buyer_deal_menu(deal, 1, context),
                                                              resize_keyboard=True),
                            parse_mode=telegram.ParseMode.MARKDOWN)
    message = context.bot.sendDocument(buyer_id, content_bytes, f"{deal.id}.{deal.count}.txt",
                                       caption=f"–í—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ [{deal.count} —à—Ç.]")
    file_id = message.document.file_id
    deal.update(status=1, file_id=file_id)
    context.user_data[DEAL_ID] = deal.id
    job_context = f"{buyer_id}|{deal.id}"
    new_job = context.job_queue.run_repeating(check_deal_status, 60, context=job_context)
    context.chat_data['job'] = new_job


def button_select_shop_services(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[CATEGORY_SERVICES] = []
    context.user_data[CATEGORY_INFO] = {}
    get_cat_services_shop_tree(context, update)
    context.user_data[DATA] = 'select_shop_services'
    update.callback_query.edit_message_text(f"ü§ù  <b>–£—Å–ª—É–≥–∏ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
                                            "üìÇ –í—ã –≤–∏–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω."
                                            "\n\n<b>–ö–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç‚ùì</b>",
                                            reply_markup=InlineKeyboardMarkup(
                                                get_subcat_service_btnlist_by_catid(context, None,
                                                                                    context.user_data[DATA],
                                                                                    chat_id),
                                                resize_keyboard=True),
                                            parse_mode='HTML')


def button_select_shop_prods_bycat(update, context, owner_id):
    query = update.callback_query
    query.answer()
    if CATEGORY_INFO not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    catid = context.user_data[CATEGORY_INFO]['cat_id']
    context.user_data[SELECT_ID] = owner_id
    products = Product.objects(category_id=catid, owner_id=owner_id)
    menu = []
    for prod in products:
        if prod.count > 0:
            menu.append([InlineKeyboardButton(f"{prod.name} |{prod.price} ‚ÇΩ|{prod.count}—à—Ç|",
                                              callback_data=f"select_product_{prod.id}")])
    menu.append(
        [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥", callback_data="back_to_select_shop_by_prods"),
         InlineKeyboardButton(f"{back_for_button}  –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞", callback_data='back_to_select_market_section')])
    shop = get_shop_obj(owner_id)
    rating = get_sum_shop_deal_rating(owner_id)
    likes = get_count_likes_deal(owner_id)
    dislikes = get_count_dislikes_deal(owner_id)
    last_comments = get_shop_two_comments(shop.owner_id)
    last_active = shop.last_active
    now = datetime.now()
    if last_active is None:
        active_info = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    else:
        diff = now - last_active
        minutes = divmod(diff, timedelta(seconds=60))[0]
        if minutes < 1:
            active_info = f"1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥"
        elif minutes > 60:
            active_info = "–±–æ–ª—å—à–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
        else:
            active_info = f"{minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
    if shop.terms_trade is None:
        terms_trade = "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    else:
        terms_trade = shop.terms_trade
    if int_r(rating / 20) == 0:
        rating_info = "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"
    else:
        rating_info = e_star * (int_r(rating / 20))
    update.callback_query.edit_message_text(
        f"<b>üìà –ü–æ–∫—É–ø–∫–∞</b>\n\n"
        f"<b>–ú–∞–≥–∞–∑–∏–Ω:</b>  {shop.shop_name}  ({shop.shop_id})\n"
        f"<b>–†–µ–π—Ç–∏–Ω–≥:</b>  {rating_info}\n"
        f"<b>–û—Ç–∑—ã–≤—ã:</b>  ({likes}) {e_like}   ({dislikes}) {e_dislike}\n"
        f"<b>–ë—ã–ª –≤ —Å–µ—Ç–∏:</b>  {active_info}\n"
        f"<b>–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b>  {get_shop_successful_deals(owner_id)}\n"
        f"<b>–ü–æ—Ä–∞–∂–µ–Ω–∏–π –≤ –î–∏—Å–ø—É—Ç–∞—Ö:</b>  {get_shop_defeat_dispute(owner_id)}\n\n"
        f"<b>‚ö† –£—Å–ª–æ–≤–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>  {terms_trade}\n\n"
        f"{last_comments}<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>",
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_select_shop_products(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[CATEGORY_PRODS] = []
    context.user_data[CATEGORY_INFO] = {}
    get_cat_products_shop_tree(context, update)
    context.user_data[DATA] = 'select_shop_prods'
    update.callback_query.edit_message_text(f"<b>üì¶ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
                                            "üìÇ –í—ã –≤–∏–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.\n\n"
                                            "‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞, –Ω–∞—Ä—É—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –±–µ–∑ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤.\n\n"
                                            "‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:</b>",
                                            reply_markup=InlineKeyboardMarkup(
                                                get_subcat_btnlist_by_catid(context, None, context.user_data[DATA],
                                                                            chat_id),
                                                resize_keyboard=True),
                                            parse_mode='HTML')


def button_deal_buyer_moder_call(update, context, deal_id):
    deal = get_deal_by_id(deal_id)
    if not deal:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    if deal.status == 2:
        deal.update(call_moderator=True)
        deal = get_deal_by_id(deal_id)
        deal_info = get_deal_info(
            deal.id) + f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n*–í—ã –≤—ã–∑–≤–∞–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –æ–∂–∏–¥–∞–π—Ç–µ...*\n\n"
        update.callback_query.edit_message_text(
            deal_info,
            reply_markup=InlineKeyboardMarkup(get_buyer_deal_menu(deal, deal.status, context),
                                              resize_keyboard=True),
            parse_mode=telegram.ParseMode.MARKDOWN)
        deal_info = get_deal_info(
            deal.id) + f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n*–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –≤—ã–∑–≤–∞–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏*\n\n"
        moders_alert(context, 'new_deal_moder_call')
        context.bot.sendMessage(deal.shop_id,
                                deal_info,
                                reply_markup=InlineKeyboardMarkup(get_shop_deal_menu(2, deal, context),
                                                                  resize_keyboard=True),
                                parse_mode=telegram.ParseMode.MARKDOWN)
    else:
        return update.callback_query.edit_message_text("üîî  –°—Ç–∞—Ç—É—Å —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!\n\n–ü–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n"
                                                       "\t\t\t\t<b>'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç -> –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ -> –¢–æ–≤–∞—Ä—ã'</b>\n\n"
                                                       "–ò –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –ø–æ–∫—É–ø–∫—É", parse_mode='HTML')


# ------------ –û—Ç–∑—ã–≤—ã —Ç–æ–≤–∞—Ä—ã
def button_deal_buyer_like(update, context, deal_id):
    deal = get_deal_by_id(deal_id)
    if not deal:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    deal.update(like=True)
    deal = get_deal_by_id(deal_id)
    deal_info = get_deal_info(deal.id) + f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n*–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ Like –ú–∞–≥–∞–∑–∏–Ω—É*\n\n"
    update.callback_query.edit_message_text(
        deal_info,
        reply_markup=InlineKeyboardMarkup(get_buyer_deal_menu(deal, deal.status, context),
                                          resize_keyboard=True),
        parse_mode=telegram.ParseMode.MARKDOWN)


def button_deal_buyer_dislike(update, context, deal_id):
    deal = get_deal_by_id(deal_id)
    if not deal:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    deal.update(like=False)
    deal = get_deal_by_id(deal_id)
    deal_info = get_deal_info(deal.id) + f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n*–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ Dislike –ú–∞–≥–∞–∑–∏–Ω—É*\n\n"
    update.callback_query.edit_message_text(
        deal_info,
        reply_markup=InlineKeyboardMarkup(get_buyer_deal_menu(deal, deal.status, context),
                                          resize_keyboard=True),
        parse_mode=telegram.ParseMode.MARKDOWN)


# -------------------- –£–°–õ–£–ì–ò ----------------
def button_select_market_section_services(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    context.user_data[CATEGORY_SERVICES] = []
    context.user_data[CATEGORY_INFO] = {}
    get_cat_services_tree(context, update, chat_id)
    context.user_data[DATA] = 'for_user_services'
    update.callback_query.edit_message_text(f"ü§ù  <b>–£—Å–ª—É–≥–∏</b>\n\n"
                                            f"‚ö†  –§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã –æ—Ñ–æ—Ä–º–ª—è—é—Ç —Å–≤–æ–∏ —É—Å–ª—É–≥–∏ –≤ –≤–∏–¥–µ –æ–±—å—è–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫. –¢–æ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø—Ä–æ–¥–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–æ–≤–∞—Ä, –∞ —ç—Ç–æ —ç–∫–æ–Ω–æ–º–∏—Ç –º–∞—Å—Å—É –≤—Ä–µ–º–µ–Ω–∏, –¥–µ–Ω–µ–≥ –∏ –Ω–µ—Ä–≤–æ–≤. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á: –ª–æ–≥–æ—Ç–∏–ø—ã, –±–∞–Ω–Ω–µ—Ä—ã, SEO –∏ –¥—Ä.\n\n"
                                            f"<b>–ö–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç‚ùì</b>\n",
                                            reply_markup=InlineKeyboardMarkup(
                                                get_subcat_service_btnlist_by_catid(context, None,
                                                                                    context.user_data[DATA],
                                                                                    chat_id),
                                                resize_keyboard=True),
                                            parse_mode='HTML')


def button_select_service(update, context, service_id):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if CATEGORY_INFO not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    serv = Service.objects(id=service_id).first()
    context.user_data[SELECT_SERV_ID] = serv.id
    context.bot.sendPhoto(chat_id, serv.picture)
    shop = get_shop_obj(serv.owner_id)
    context.user_data[SELECT_ID] = shop.owner_id
    context.bot.sendMessage(chat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è:  {context.user_data[CATEGORY_INFO]['cat_path']}\n"
                                     f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b>  {shop.shop_name}  ({shop.shop_id})\n\n"
                                     f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:</b>  {serv.name}\n\n"
                                     f"<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b>  {serv.min_price} ‚ÇΩ\n\n"
                                     f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:</b>  {serv.description}",
                            reply_markup=InlineKeyboardMarkup(
                                market_select_service_menu,
                                resize_keyboard=True),
                            parse_mode='HTML')
    '''
    cat_path_text = ""
    if 'cat_path' in context.user_data[CATEGORY_INFO]:
        cat_path_text = "\n\n<u>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</u>\n" + context.user_data[CATEGORY_INFO]['cat_path']
    context.bot.sendMessage(chat_id, f" <b>–†—ã–Ω–æ–∫ (—É—Å–ª—É–≥–∏)</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π{cat_path_text}",
                            reply_markup=InlineKeyboardMarkup(
                                get_subcat_service_btnlist_by_catid(context, catid,
                                                                    context.user_data[DATA],
                                                                    chat_id),
                                resize_keyboard=True),
                            parse_mode='HTML')
    '''


def button_market_select_service_portfolio(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    service = get_service_by_id(context.user_data[SELECT_SERV_ID])
    portfolio = service.portfolio
    if portfolio is None:
        context.bot.sendMessage(chat_id, "–£ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω–µ—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–µ")
    else:
        context.bot.sendDocument(chat_id, portfolio,
                                 caption=f"–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
                                 reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥",
                                                                                          callback_data='back_to_market_select_service_menu_portfolio')]]))


def button_market_select_service_order(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    service = get_service_by_id(context.user_data[SELECT_SERV_ID])
    if chat_id == service.owner_id:
        return context.bot.sendMessage(chat_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É —É —Å–µ–±—è")
    if get_user_balance(chat_id) < get_ltc_by_rub(service.min_price):
        return context.bot.sendMessage(chat_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞!")
    menu = []
    if service.eco_description is not None:
        menu.append(
            [InlineKeyboardButton(f"–≠–∫–æ–Ω–æ–º | {service.eco_price} ‚ÇΩ | –î–Ω–µ–π –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - {service.eco_deadline} ",
                                  callback_data=f"market_select_service_packet_eco")])
    if service.standart_description is not None:
        menu.append([InlineKeyboardButton(
            f"–°—Ç–∞–Ω–¥–∞—Ä—Ç | {service.standart_price} ‚ÇΩ | –î–Ω–µ–π –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - {service.standart_deadline}",
            callback_data=f"market_select_service_packet_standart")])
    if service.biz_description is not None:
        menu.append(
            [InlineKeyboardButton(f"–ë–∏–∑–Ω–µ—Å | {service.biz_price} ‚ÇΩ | –î–Ω–µ–π –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - {service.biz_deadline}",
                                  callback_data=f"market_select_service_packet_biz")])
    menu.append([InlineKeyboardButton(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ | –æ—Ç {service.min_price} ‚ÇΩ",
                                      callback_data="market_select_service_packet_unique")])
    menu.append(
        [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥",
                              callback_data='back_to_market_select_service_menu')])
    update.callback_query.edit_message_text(
        f"<b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑\n\n",
        reply_markup=InlineKeyboardMarkup(
            menu,
            resize_keyboard=True),
        parse_mode='HTML')


def button_market_select_service_packet_eco(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    service_id = context.user_data[SELECT_SERV_ID]
    service = get_service_by_id(service_id)
    if get_user_balance(chat_id) < get_ltc_by_rub(service.eco_price):
        return update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞!",
                                                       reply_markup=InlineKeyboardMarkup(
                                                           [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                                                  callback_data='back_to_market_select_service_order')]],
                                                           resize_keyboard=True),
                                                       parse_mode='HTML')
    context.user_data[SELECT_SERV_PACKET] = 1
    update.callback_query.edit_message_text(
        f"   <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–∫–µ—Ç '–≠–∫–æ–Ω–æ–º'\n\n"
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞:</b>  {service.eco_price} ‚ÇΩ\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞:</b>  {service.eco_description}\n\n"
        f"<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>  {service.eco_deadline} –¥–Ω–µ–π\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ <b>—Ç–µ–∫—Å—Ç–æ–º</b> –∏–ª–∏ —Ñ–∞–π–ª–æ–º <b>(txt / word / pdf)</b>",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                   callback_data='back_to_market_select_service_order')]],
            resize_keyboard=True),
        parse_mode='HTML')
    return CLIENT_SEND_TZ


def button_market_select_service_packet_standart(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    service_id = context.user_data[SELECT_SERV_ID]
    service = get_service_by_id(service_id)
    if get_user_balance(chat_id) < get_ltc_by_rub(service.standart_price):
        return update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞!",
                                                       reply_markup=InlineKeyboardMarkup(
                                                           [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                                                  callback_data='back_to_market_select_service_order')]],
                                                           resize_keyboard=True),
                                                       parse_mode='HTML')
    context.user_data[SELECT_SERV_PACKET] = 2
    update.callback_query.edit_message_text(
        f"   <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–∫–µ—Ç '–°—Ç–∞–Ω–¥–∞—Ä—Ç'\n\n"
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞:</b>  {service.standart_price} ‚ÇΩ\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞:</b>  {service.standart_description}\n\n"
        f"<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>  {service.standart_deadline} –¥–Ω–µ–π\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ <b>—Ç–µ–∫—Å—Ç–æ–º</b> –∏–ª–∏ —Ñ–∞–π–ª–æ–º <b>(txt / word / pdf)</b>",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                   callback_data='back_to_market_select_service_order')]],
            resize_keyboard=True),
        parse_mode='HTML')
    return CLIENT_SEND_TZ


def button_market_select_service_packet_biz(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    service_id = context.user_data[SELECT_SERV_ID]
    service = get_service_by_id(service_id)
    if get_user_balance(chat_id) < get_ltc_by_rub(service.biz_price):
        return update.callback_query.edit_message_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞!",
                                                       reply_markup=InlineKeyboardMarkup(
                                                           [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                                                  callback_data='back_to_market_select_service_order')]],
                                                           resize_keyboard=True),
                                                       parse_mode='HTML')
    context.user_data[SELECT_SERV_PACKET] = 3
    update.callback_query.edit_message_text(
        f"   <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–∫–µ—Ç '–ë–∏–∑–Ω–µ—Å'\n\n"
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞:</b>  {service.biz_price} ‚ÇΩ\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞:</b>  {service.biz_description}\n\n"
        f"<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>  {service.biz_deadline} –¥–Ω–µ–π\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ <b>—Ç–µ–∫—Å—Ç–æ–º</b> –∏–ª–∏ —Ñ–∞–π–ª–æ–º <b>(txt / word / pdf)</b>",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                   callback_data='back_to_market_select_service_order')]],
            resize_keyboard=True),
        parse_mode='HTML')
    return CLIENT_SEND_TZ


def button_market_select_service_packet_unique(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_SERV_PACKET] = 4
    update.callback_query.edit_message_text(
        f"   <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑\n\n"
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —É—Ç–æ—á–Ω–µ–Ω—ã –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –ø–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –¢–ó</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ <b>—Ç–µ–∫—Å—Ç–æ–º</b> –∏–ª–∏ —Ñ–∞–π–ª–æ–º <b>(txt / word / pdf)</b>",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                   callback_data='back_to_market_select_service_order')]],
            resize_keyboard=True),
        parse_mode='HTML')
    return CLIENT_SEND_TZ


def button_order_client_cancel(update, context, order_id):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    order = get_order_by_id(order_id)
    if order is None:
        return update.callback_query.edit_message_text(
            f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
            f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode='HTML')
    if order.status > 1:
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!</i>"
        return update.callback_query.edit_message_text(
            f"{get_order_info(order_id)}{text_info}",
            reply_markup=InlineKeyboardMarkup(get_client_order_menu(order.id, order.status, context),
                                              resize_keyboard=True),
            parse_mode='HTML')
    if order.packet < 4 and order.price_ltc is not None:
        add_user_balance(chat_id, order.price_ltc)
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á—ë—Ç!</i>"
    else:
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω!</i>"
    update.callback_query.edit_message_text(
        f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
        f"{get_order_info(order_id)}{text_info}",
        parse_mode='HTML')

    text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–º–µ–Ω–∏–ª –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑!</i>"
    context.bot.sendMessage(order.shop_id,
                            f"{get_order_info(order_id)}{text_info}",
                            parse_mode='HTML')
    order.delete()


def button_order_shop_tz(update, context, order_id):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    order = get_order_by_id(order_id)
    context.user_data[ORDER_ID] = order_id
    if order is None:
        return update.callback_query.edit_message_text(
            f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
            f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode='HTML')
    try:
        context.bot.get_file(order.tz)
    except Exception as e:
        if str(e) == 'Invalid file_id':
            context.bot.sendMessage(chat_id, "<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É</b>\n\n" + order.tz,
                                    reply_markup=InlineKeyboardMarkup(
                                        [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                               callback_data='back_to_shop_order_menu')]],
                                        resize_keyboard=True),
                                    parse_mode='HTML')
    else:
        context.bot.sendDocument(chat_id, order.tz, caption="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É",
                                 reply_markup=InlineKeyboardMarkup(
                                     [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                            callback_data='back_to_shop_order_menu')]],
                                     resize_keyboard=True),
                                 parse_mode='HTML')


def button_order_client_tz(update, context, order_id):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    order = get_order_by_id(order_id)
    context.user_data[ORDER_ID] = order_id
    if order is None:
        return update.callback_query.edit_message_text(
            f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
            f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode='HTML')
    try:
        context.bot.get_file(order.tz)
    except Exception as e:
        if str(e) == 'Invalid file_id':
            context.bot.sendMessage(chat_id, "<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É</b>\n\n" + order.tz,
                                    reply_markup=InlineKeyboardMarkup(
                                        [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                               callback_data='back_to_client_order_menu')]],
                                        resize_keyboard=True),
                                    parse_mode='HTML')
    else:
        context.bot.sendDocument(chat_id, order.tz, caption="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É",
                                 reply_markup=InlineKeyboardMarkup(
                                     [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                            callback_data='back_to_client_order_menu')]],
                                     resize_keyboard=True),
                                 parse_mode='HTML')


def button_order_shop_cancel(update, context, order_id):
    query = update.callback_query
    query.answer()
    order = get_order_by_id(order_id)
    if order is None:
        return update.callback_query.edit_message_text(
            f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
            f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode='HTML')
    if order.status != 0:
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!</i>"
        return update.callback_query.edit_message_text(
            f"{get_order_info(order_id)}{text_info}",
            reply_markup=InlineKeyboardMarkup(get_shop_order_menu(order.id, order.status, context),
                                              resize_keyboard=True),
            parse_mode='HTML')

    text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞!</i>"

    update.callback_query.edit_message_text(
        f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
        f"{text_info}",
        parse_mode='HTML')

    if order.packet < 4:
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑!</i>\n" \
                    "<i>–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á—ë—Ç</i>"
        add_user_balance(order.client_id, order.price_ltc)
    else:
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑!</i>\n"
    context.bot.sendMessage(order.client_id,
                            f"{get_order_info(order_id)}{text_info}",
                            parse_mode='HTML')
    order.delete()


def button_order_shop_accept(update, context, order_id):
    query = update.callback_query
    query.answer()
    order = get_order_by_id(order_id)
    if order is None:
        return update.callback_query.edit_message_text(
            f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
            f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode='HTML')
    if order.status != 0:
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!</i>"
        return update.callback_query.edit_message_text(
            f"{get_order_info(order_id)}{text_info}",
            reply_markup=InlineKeyboardMarkup(get_shop_order_menu(order.id, order.status, context),
                                              resize_keyboard=True),
            parse_mode='HTML')
    if order.packet < 4:
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞\n\n" \
                    "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ —Å—Ä–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ó–∞–∫–∞–∑—á–∏–∫—É!</i>"
        now = datetime.now()
        date_start = now
        date_deadline = date_start + timedelta(days=order.deadline_days)
        order.update(date_start=date_start, date_deadline=date_deadline, status=2)
        update.callback_query.edit_message_text(
            f"{get_order_info(order_id)}{text_info}",
            reply_markup=InlineKeyboardMarkup(get_shop_order_menu(order.id, 2, context),
                                              resize_keyboard=True),
            parse_mode='HTML')
        text_info = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ {e_smiling}\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞</i>"
        context.bot.sendMessage(order.client_id,
                                f"{get_order_info(order_id)}{text_info}",
                                reply_markup=InlineKeyboardMarkup(get_client_order_menu(order.id, 2, context),
                                                                  resize_keyboard=True),
                                parse_mode='HTML')
    else:
        if order.price is None or order.price_ltc is None or order.deadline_days is None:
            text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–í—ã –Ω–µ –æ—Ü–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑!</i>"
            update.callback_query.edit_message_text(
                f"{get_order_info(order_id)}{text_info}",
                reply_markup=InlineKeyboardMarkup(get_shop_order_menu(order.id, order.status, context),
                                                  resize_keyboard=True),
                parse_mode='HTML')
            return
        now = datetime.now()
        date_start = now
        date_deadline = date_start + timedelta(days=order.deadline_days)
        order.update(date_start=date_start, date_deadline=date_deadline, status=1)

        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞\n\n" \
                    "–û–∂–∏–¥–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏—è –ó–∞–∫–∞–∑—á–∏–∫–∞!</i>"

        update.callback_query.edit_message_text(
            f"{get_order_info(order_id)}{text_info}",
            reply_markup=InlineKeyboardMarkup(get_shop_order_menu(order.id, 1, context),
                                              resize_keyboard=True),
            parse_mode='HTML')

        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–ª –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ</i>"
        context.bot.sendMessage(order.client_id,
                                f"{get_order_info(order_id)}{text_info}",
                                reply_markup=InlineKeyboardMarkup(get_client_order_menu(order.id, 1, context),
                                                                  resize_keyboard=True),
                                parse_mode='HTML')


def button_order_client_confirm(update, context, order_id):
    query = update.callback_query
    query.answer()
    order = get_order_by_id(order_id)
    chat_id = query.message.chat.id
    if order is None:
        return update.callback_query.edit_message_text(
            f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
            f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode='HTML')
    if order.packet < 4 or order.price_ltc is None or order.deadline_days is None or order.price is None:
        return update.callback_query.edit_message_text(
            f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
            f"–û—à–∏–±–∫–∞!",
            parse_mode='HTML')
    if order.status != 1:
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!</i>"
        return update.callback_query.edit_message_text(
            f"{get_order_info(order_id)}{text_info}",
            reply_markup=InlineKeyboardMarkup(get_shop_order_menu(order.id, order.status, context),
                                              resize_keyboard=True),
            parse_mode='HTML')
    if get_user_balance(chat_id) < order.price_ltc:
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞!</i>"
        return update.callback_query.edit_message_text(
            f"{get_order_info(order_id)}{text_info}",
            reply_markup=InlineKeyboardMarkup(get_client_order_menu(order.id, order.status, context),
                                              resize_keyboard=True),
            parse_mode='HTML')
    add_user_balance(chat_id, order.price_ltc)

    text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑\n\n" \
                "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç –∑–∞–∫–∞–∑!</i>"
    now = datetime.now()
    date_start = now
    date_deadline = date_start + timedelta(days=order.deadline_days)
    order.update(date_start=date_start, date_deadline=date_deadline, status=2)

    update.callback_query.edit_message_text(
        f"{get_order_info(order_id)}{text_info}",
        reply_markup=InlineKeyboardMarkup(get_client_order_menu(order.id, 2, context),
                                          resize_keyboard=True),
        parse_mode='HTML')

    text_info = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ {e_smiling}\n" \
                "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ —Å—Ä–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑—á–∏–∫—É</i>"
    context.bot.sendMessage(order.shop_id,
                            f"{get_order_info(order_id)}{text_info}",
                            reply_markup=InlineKeyboardMarkup(get_shop_order_menu(order.id, 2, context),
                                                              resize_keyboard=True),
                            parse_mode='HTML')


def button_order_client_close(update, context, order_id):
    query = update.callback_query
    query.answer()
    order = get_order_by_id(order_id)
    if order is None:
        return update.callback_query.edit_message_text(
            f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
            f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode='HTML')
    if order.status != 2 and order.status != 3:
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!</i>"
        return update.callback_query.edit_message_text(
            f"{get_order_info(order_id)}{text_info}",
            reply_markup=InlineKeyboardMarkup(get_client_order_menu(order.id, order.status, context),
                                              resize_keyboard=True),
            parse_mode='HTML')
    if order.order_work is None:
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –≤–∞–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª!</i>"
        return update.callback_query.edit_message_text(
            f"{get_order_info(order_id)}{text_info}",
            reply_markup=InlineKeyboardMarkup(get_client_order_menu(order.id, order.status, context),
                                              resize_keyboard=True),
            parse_mode='HTML')
    text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑!</i>"
    order.update(status=4)
    update.callback_query.edit_message_text(
        f"{get_order_info(order_id)}{text_info}",
        reply_markup=InlineKeyboardMarkup(get_client_order_menu(order.id, 4, context),
                                          resize_keyboard=True),
        parse_mode='HTML')
    text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ó–∞–∫–∞–∑—á–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑, —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á—ë—Ç –í–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞!\n</i>"
    add_shop_balance(order.shop_id, order.price_ltc - (order.price_ltc * commission_per_deals))
    context.bot.sendMessage(order.shop_id,
                            f"{get_order_info(order_id)}{text_info}",
                            reply_markup=InlineKeyboardMarkup(get_shop_order_menu(order.id, 4, context),
                                                              resize_keyboard=True),
                            parse_mode='HTML')
    now = datetime.now()
    if now > order.date_deadline:
        order.update(late_deadline=True)


def button_order_client_get_service(update, context, order_id):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    order = get_order_by_id(order_id)
    if order is None:
        return update.callback_query.edit_message_text(
            f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
            f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode='HTML')
    if order.order_work is None:
        return update.callback_query.edit_message_text(
            f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –≤–∞–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª!",
            parse_mode='HTML')
    context.bot.sendDocument(chat_id, order.order_work, caption="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑")


def button_order_client_dispute(update, context, order_id):
    query = update.callback_query
    query.answer()
    order = get_order_by_id(order_id)
    if order is None:
        return update.callback_query.edit_message_text(
            f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
            f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode='HTML')
    if order.status != 2:
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!</i>"
        return update.callback_query.edit_message_text(
            f"{get_order_info(order_id)}{text_info}",
            reply_markup=InlineKeyboardMarkup(get_client_order_menu(order.id, order.status, context),
                                              resize_keyboard=True),
            parse_mode='HTML')
    text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –î–∏—Å–ø—É—Ç –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–∫–∞–∑—É.\n" \
                "–†–µ—à–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º, —á–µ—Ä–µ–∑ —á–∞—Å –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!</i>"
    order.update(status=3)
    update.callback_query.edit_message_text(
        f"{get_order_info(order_id)}{text_info}",
        reply_markup=InlineKeyboardMarkup(get_client_order_menu(order.id, 3, context),
                                          resize_keyboard=True),
        parse_mode='HTML')

    text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫—Ä—ã–ª –î–∏—Å–ø—É—Ç –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–∫–∞–∑—É.\n" \
                "–†–µ—à–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –ó–∞–∫–∞–∑—á–∏–∫–æ–º, —á–µ—Ä–µ–∑ —á–∞—Å –æ–Ω —Å–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!</i>"
    context.bot.sendMessage(order.shop_id,
                            f"{get_order_info(order_id)}{text_info}",
                            reply_markup=InlineKeyboardMarkup(get_shop_order_menu(order.id, 3, context),
                                                              resize_keyboard=True),
                            parse_mode='HTML')
    job_context = order.id
    new_job = context.job_queue.run_repeating(call_moder_order_add, 3600, context=job_context)
    context.chat_data['job'] = new_job


def call_moder_order_add(context):
    job = context.job
    order_id = job.context
    order = get_order_by_id(order_id)
    if order.status == 3 and order.call_moderator is False:
        order.update(potential=True)
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞\n</i>"
        context.bot.sendMessage(order.client_id,
                                f"{get_order_info(order_id)}{text_info}",
                                reply_markup=InlineKeyboardMarkup(get_client_order_menu(order.id, 3, context),
                                                                  resize_keyboard=True),
                                parse_mode='HTML')
    job.schedule_removal()


def button_order_client_moder_call(update, context, order_id):
    query = update.callback_query
    query.answer()
    order = get_order_by_id(order_id)
    if order is None:
        return update.callback_query.edit_message_text(
            f"‚ö†  <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n"
            f"–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            parse_mode='HTML')
    if order.status != 3 or order.potential is False:
        text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!</i>"
        return update.callback_query.edit_message_text(
            f"{get_order_info(order_id)}{text_info}",
            reply_markup=InlineKeyboardMarkup(get_client_order_menu(order.id, order.status, context),
                                              resize_keyboard=True),
            parse_mode='HTML')
    text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–í—ã –≤—ã–∑–≤–∞–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞. –û–∂–∏–¥–∞–π—Ç–µ...</i>"
    order.update(call_moderator=True)
    update.callback_query.edit_message_text(
        f"{get_order_info(order_id)}{text_info}",
        reply_markup=InlineKeyboardMarkup(get_client_order_menu(order.id, order.status, context),
                                          resize_keyboard=True),
        parse_mode='HTML')

    text_info = "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ó–∞–∫–∞–∑—á–∏–∫ –≤—ã–∑–≤–∞–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞!</i>"
    moders_alert(context, 'new_order_moder_call')
    context.bot.sendMessage(order.shop_id,
                            f"{get_order_info(order_id)}{text_info}",
                            reply_markup=InlineKeyboardMarkup(get_shop_order_menu(order.id, order.status, context),
                                                              resize_keyboard=True),
                            parse_mode='HTML')


# ------------ –û—Ç–∑—ã–≤—ã –≤ —É—Å–ª—É–≥–∞—Ö --------------
def button_order_buyer_like(update, context, order_id):
    order = get_order_by_id(order_id)
    if not order:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    order.update(like=True)
    order = get_order_by_id(order_id)
    order_info = get_order_info(order_id) + f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<b>–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ Like –ú–∞–≥–∞–∑–∏–Ω—É</b>\n\n"
    update.callback_query.edit_message_text(
        order_info,
        reply_markup=InlineKeyboardMarkup(get_client_order_menu(order_id, order.status, context),
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_order_buyer_dislike(update, context, order_id):
    order = get_order_by_id(order_id)
    if not order:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    order.update(like=False)
    order = get_order_by_id(order_id)
    order_info = get_order_info(order_id) + f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<b>–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ Dislike –ú–∞–≥–∞–∑–∏–Ω—É</b>\n\n"
    update.callback_query.edit_message_text(
        order_info,
        reply_markup=InlineKeyboardMarkup(get_client_order_menu(order_id, order.status, context),
                                          resize_keyboard=True),
        parse_mode='HTML')


# ============== –û—Ç–∑—ã–≤—ã ===================
def button_select_shop_comments(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    shop_name = get_shop_name(context.user_data[SELECT_ID])
    menu = deepcopy(select_comments_section)
    if check_moderator(chat_id) and context.user_data[SELECT_ID] != chat_id:
        menu.append([InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥', callback_data='back_moder_select_shop_menu')])
    elif context.user_data[SELECT_ID] == chat_id:
        menu.append([InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥', callback_data='back_to_my_shop_menu')])
    else:
        menu.append([InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥', callback_data='back_user_select_shop_menu')])
    update.callback_query.edit_message_text(
        f"üó£  <b>–û—Ç–∑—ã–≤—ã –æ –º–∞–≥–∞–∑–∏–Ω–µ  {shop_name}</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª</b>",
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_market_select_service_comments(update, context):
    query = update.callback_query
    query.answer()
    if SELECT_SERV_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    show_list_text(update, context, "shop_services_comments")


def button_select_comments_section_products(update, context):
    query = update.callback_query
    query.answer()
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    show_list_text(update, context, "shop_products_comments")


def button_select_comments_section_services(update, context):
    query = update.callback_query
    query.answer()
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    show_list_text(update, context, "shop_services_comments")


# ========================================== –†–ê–ó–î–ï–õ –ú–û–î–ï–†–ê–¢–û–†–ê ======================================================
def button_section_moderator_handler(update, context):
    update.message.reply_text(f'{e_policeman}   <b>–†–∞–∑–¥–µ–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>',
                              reply_markup=InlineKeyboardMarkup(moderator_menu, resize_keyboard=True),
                              parse_mode='HTML')


# –í—ã–±–æ—Ä –†–∞–∑–¥–µ–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ -> –ú–∞–≥–∞–∑–∏–Ω—ã
def button_submenu_moder_shops(update, context):
    query = update.callback_query
    query.answer()
    update.callback_query.edit_message_text(
        f"   <b>–ú–∞–≥–∞–∑–∏–Ω—ã</b>\n\n–†–∞–∑–¥–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ú–∞–≥–∞–∑–∏–Ω–æ–≤",
        reply_markup=InlineKeyboardMarkup(shop_moder_menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


# –í—ã–±–æ—Ä –†–∞–∑–¥–µ–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ -> –ú–∞–≥–∞–∑–∏–Ω—ã -> –ó–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ
def button_shop_moder_requests(update, context):
    query = update.callback_query
    query.answer()
    update.callback_query.edit_message_text(
        f"<b>–ó–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ</b>\n\n–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "requests"),
                                          resize_keyboard=True),
        parse_mode='HTML')


# –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
def button_req_open_shop(update, context, creator_id):
    query = update.callback_query
    query.answer()
    req_creator_id = creator_id
    user = get_user_obj(req_creator_id)
    req_creator_name = user.username
    shop_req_obj = get_shop_request_obj(req_creator_id)
    shop_name = shop_req_obj.shop_name
    shop_request_date = shop_req_obj.created_at
    shop_why = shop_req_obj.why
    update.callback_query.edit_message_text(
        f"   <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–æ–π</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ:  <i>{shop_name}</i>\n"
        f"TG –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:  @{req_creator_name}\n"
        f"ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:  {user.user_id}\n"
        f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:  {shop_request_date}\n\n"
        f"<b>–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b>  {shop_why}\n"
        f"<b>–†–µ—Å—É—Ä—Å:</b>  {shop_req_obj.res}",
        reply_markup=InlineKeyboardMarkup(shop_moder_requests_approved_menu(req_creator_id),
                                          resize_keyboard=True),
        parse_mode='HTML')
    context.user_data[SELECT_ID] = creator_id


# –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
def button_shop_moder_requests_approved_yes(update, context):
    query = update.callback_query
    query.answer()
    req_creator_id = query.data[33:]
    who_approved = query.message.chat.id
    add_new_shop(req_creator_id, who_approved)
    delete_req_open_shop(req_creator_id)
    menu = update_main_menu(req_creator_id)
    context.bot.sendMessage(req_creator_id,
                            "<b>[–û–ø–æ–≤–µ—â–µ–Ω–∏–µ]</b> –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º\n\n"
                            "–î–ª—è –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç —Ä–∞–∑–¥–µ–ª <i>'–ú–æ–π –º–∞–≥–∞–∑–∏–Ω'</i> –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!\n"
                            "–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏, –≤–Ω–µ—Å—Ç–∏ –≥–∞—Ä–∞–Ω—Ç –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\n\n"
                            f"–ñ–µ–ª–∞–µ–º –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏ –≤ –∫–æ–º–∞–Ω–¥–µ {e_winking}", reply_markup=menu,
                            parse_mode='HTML')
    update.callback_query.edit_message_text(
        f"<b>–ó–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ</b>\n\n–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "requests"),
                                          resize_keyboard=True, parse_mode='HTML'),
        parse_mode='HTML')
    return


# –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
def button_shop_moder_requests_approved_no(update, context):
    query = update.callback_query
    query.answer()
    req_creator_id = query.data[32:]
    delete_req_open_shop(req_creator_id)
    context.bot.sendMessage(req_creator_id,
                            "<b>[–û–ø–æ–≤–µ—â–µ–Ω–∏–µ]</b> –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º",
                            parse_mode='HTML')
    update.callback_query.edit_message_text(
        f"<b>–ó–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ</b>\n\n–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "requests"),
                                          resize_keyboard=True), parse_mode='HTML')


# –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
def button_shop_moder_list(update, context):
    query = update.callback_query
    query.answer()
    update.callback_query.edit_message_text(
        f"   <b>–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "shops"),
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_shop_moder_search(update, context):
    query = update.callback_query
    query.answer()
    update.callback_query.edit_message_text(
        f"   <b>–ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞</b>",
        reply_markup=InlineKeyboardMarkup(shop_moder_find_menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


# –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def button_submenu_moder_users(update, context):
    query = update.callback_query
    query.answer()
    update.callback_query.edit_message_text(
        f"   <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>",
        reply_markup=InlineKeyboardMarkup(moder_find_user_menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ
def button_moder_select_shop(update, context, owner_id):
    query = update.callback_query
    query.answer()
    text = get_shop_info_text(query.message.chat.id, owner_id)
    update.callback_query.edit_message_text(text,
                                            reply_markup=InlineKeyboardMarkup(get_moder_select_shop_menu(owner_id),
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')
    context.user_data[SELECT_ID] = owner_id


def button_moder_select_shop_ban(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    owner_id = context.user_data[SELECT_ID]
    shop = get_shop_obj(owner_id)
    if shop.banned:
        shop_unban(owner_id)
        update.callback_query.edit_message_text(
            f"   <b>–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤</b>\n\n–ú–∞–≥–∞–∑–∏–Ω <b>{shop.shop_name}</b> —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "shops"),
                                              resize_keyboard=True),
            parse_mode='HTML')
        context.bot.sendMessage(owner_id,
                                f"<b>[–û–ø–æ–≤–µ—â–µ–Ω–∏–µ]</b> –í–∞—à –º–∞–≥–∞–∑–∏–Ω –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {e_smiling}\n"
                                f"–ë–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞!\n",
                                reply_markup=update_main_menu(owner_id),
                                parse_mode='HTML')
    else:
        shop_ban(owner_id)
        update.callback_query.edit_message_text(
            f"   <b>–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤</b>\n\n–ú–∞–≥–∞–∑–∏–Ω <b>{shop.shop_name}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "shops"),
                                              resize_keyboard=True),
            parse_mode='HTML')
        context.bot.sendMessage(owner_id,
                                f"<b>[–û–ø–æ–≤–µ—â–µ–Ω–∏–µ]</b> –í–∞—à –º–∞–≥–∞–∑–∏–Ω –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª "
                                f"—Å–µ—Ä–≤–∏—Å–∞!\n"
                                f"\n<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>:  {url_support}\n\n",
                                reply_markup=update_main_menu(owner_id),
                                parse_mode='HTML')


def button_moder_select_user_ban(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    select_user_id = context.user_data[SELECT_ID]
    select_user_obj = get_user_obj(select_user_id)
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if select_user_obj.banned:
        user_unban(select_user_obj)
        text = get_user_info_text(chat_id, select_user_id)
        update.callback_query.edit_message_text(text,
                                                reply_markup=InlineKeyboardMarkup(moder_select_user_menu,
                                                                                  resize_keyboard=True),
                                                parse_mode='HTML')
        context.bot.sendMessage(select_user_obj.chat_id,
                                f"<b>[–û–ø–æ–≤–µ—â–µ–Ω–∏–µ]</b> –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {e_smiling}\n"
                                f"–ë–æ–ª—å—à–µ –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞!\n",
                                reply_markup=update_main_menu(select_user_obj.chat_id),
                                parse_mode='HTML')

    else:
        if select_user_id == chat_id:
            return context.bot.sendMessage(chat_id,
                                           f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–∏ —Å–µ–±—è!",
                                           parse_mode='HTML')
        if check_moderator(select_user_id):
            return context.bot.sendMessage(chat_id,
                                           f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!",
                                           parse_mode='HTML')
        user_ban(select_user_obj)
        text = get_user_info_text(chat_id, select_user_id)
        update.callback_query.edit_message_text(text,
                                                reply_markup=InlineKeyboardMarkup(moder_select_user_menu,
                                                                                  resize_keyboard=True),
                                                parse_mode='HTML')
        context.bot.sendMessage(select_user_obj.chat_id,
                                f"<b>[–û–ø–æ–≤–µ—â–µ–Ω–∏–µ]</b> –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–∏—Å–∞!"
                                f"\n\n<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> {url_support}\n\n",
                                reply_markup=ReplyKeyboardRemove(),
                                parse_mode='HTML')


def button_moder_select_user_payments(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    show_list_text(update, context, "user_payments")


# def myshop_info(update, context):
#    query = update.callback_query
#    query.answer()
#    owner_id = query.message.chat.id
#    text = e_memo + "  " + get_shop_info_text(owner_id)
#    update.callback_query.edit_message_text(text,
#                                           reply_markup=InlineKeyboardMarkup(myshop_info_menu,
#                                                                              resize_keyboard=True),
#                                           parse_mode='HTML')


def button_moder_select_shop_operations(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    show_list_text(update, context, "shop_operations")


# –ë–£–•–ì–ê–õ–¢–ï–†–ò–Ø
def button_submenu_moder_bookkeeping(update, context):
    menu = [[InlineKeyboardButton(
        f'{back_for_button}  –ù–∞–∑–∞–¥',
        callback_data='back_to_moder_menu')]]

    query = update.callback_query
    query.answer()

    coinbase_balance = get_coinbase_balance()
    users_balance = get_users_balance()
    shops_balance = get_shops_balance()
    shops_guarantee = get_shops_guarantee()
    shops_freeze_guarantee = get_shops_freeze_guarantee()
    users_count = get_users_count()

    info = f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:  <b>{users_count}</b>\n\n" \
           f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—É–º–º–∞):  <b>{round(users_balance, 8)}</b> LTC\n" \
           f"–ë–∞–ª–∞–Ω—Å –º–∞–≥–∞–∑–∏–Ω–æ–≤ (—Å—É–º–º–∞):  <b>{round(shops_balance, 8)}</b> LTC\n" \
           f"–ì–∞—Ä–∞–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ (—Å—É–º–º–∞):  <b>{round(shops_guarantee, 8)}</b> LTC\n" \
           f"–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ –≥–∞—Ä–∞–Ω—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ (—Å—É–º–º–∞):  <b>{round(shops_freeze_guarantee, 8)}</b> LTC\n" \
           f"<b>–°—É–º–º–∞:</b>  {round((users_balance + shops_balance + shops_guarantee + shops_freeze_guarantee), 8)} LTC\n\n" \
           f"–ë–∞–ª–∞–Ω—Å COINBASE:  <b>{round(coinbase_balance, 8)}</b> LTC"

    return update.callback_query.edit_message_text(
        f"üí∞  <b>–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è</b>\n\n{info}",
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


# ---------- –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞ ---------------
def button_moder_select_shop_sales(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    shop_id = context.user_data[SELECT_ID]
    query = update.callback_query
    query.answer()
    open_deals = count_open_deals(shop_id)
    open_orders = count_open_sh_orders(shop_id)
    update.callback_query.edit_message_text(
        f"{e_shopping_bags}  <b>–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞ {get_shop_name(shop_id)}  ({get_shop_id(shop_id)})</b>\n\n"
        f"–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏:\n"
        f"\t\t–¢–æ–≤–∞—Ä—ã - <b>{open_deals}</b>\n"
        f"\t\t–£—Å–ª—É–≥–∏ - <b>{open_orders}</b>\n\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥–∞–∂</b>",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(f"üì¶  –¢–æ–≤–∞—Ä—ã",
                                  callback_data='moder_shop_sales_type_products'),
             InlineKeyboardButton(f"ü§ù  –£—Å–ª—É–≥–∏",
                                  callback_data='moder_shop_sales_type_services')],
            [InlineKeyboardButton(
                f'{back_for_button}  –ù–∞–∑–∞–¥',
                callback_data='back_moder_select_shop_menu')]
        ],
            resize_keyboard=True),
        parse_mode='HTML')


# ------------------------------  –ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞ -----------------------------
# --------- –¢–æ–≤–∞—Ä—ã -----------
def button_moder_shop_sales_type_products(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    shop_id = context.user_data[SELECT_ID]
    count_dispute = get_shop_dispute_deals_count(shop_id)
    count_open = get_shop_open_deals_count(shop_id)
    count_close = get_shop_close_deals_count(shop_id)
    if count_dispute == 0 and count_open == 0 and count_close == 0:
        return update.callback_query.edit_message_text(
            f"{e_shopping_bags}  <b>–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞ {get_shop_name(shop_id)}  ({get_shop_id(shop_id)}) (—Ç–æ–≤–∞—Ä—ã)</b>\n\n–£ —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫",
            reply_markup=
            InlineKeyboardMarkup([[InlineKeyboardButton(
                f'{back_for_button}  –ù–∞–∑–∞–¥',
                callback_data='back_moder_shop_sales_type')]],
                resize_keyboard=True),
            parse_mode='HTML')
    menu = get_submenu_trades(count_dispute, count_open, count_close, "moder_shop_sales")
    update.callback_query.edit_message_text(
        f"{e_shopping_bags}  <b>–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞ {get_shop_name(shop_id)}  ({get_shop_id(shop_id)}) (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–¥–µ–ª–∫–∏</b>",
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_moder_select_section_dispute(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_SALE_SECTION] = "dispute"
    update.callback_query.edit_message_text(
        f"<b>–î–∏—Å–ø—É—Ç—ã (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b><b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b></b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "moder_shop_sales"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_moder_select_section_open(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_SALE_SECTION] = "open"
    update.callback_query.edit_message_text(
        f"<b>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b><b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b></b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "moder_shop_sales"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_moder_select_section_close(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_SALE_SECTION] = "close"
    update.callback_query.edit_message_text(
        f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b><b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b></b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "moder_shop_sales"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_moder_shop_sales(update, context, deal_id):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    deal = get_deal_by_id(deal_id)
    context.user_data[DEAL_ID] = deal_id
    if deal.call_moderator and deal.status == 2:
        menu = [
            [InlineKeyboardButton(f"–°–æ–æ–±—â–µ–Ω–∏—è", callback_data='moder_select_call_menu_messages'),
             InlineKeyboardButton(f"–¢–æ–≤–∞—Ä", callback_data='moder_select_call_menu_content')],
            [InlineKeyboardButton(f"–ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", callback_data='moder_select_call_menu_close_deal')],
            [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥", callback_data='back_to_shop_sales_list')]
        ]
    else:
        menu = [
            [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥", callback_data='back_to_shop_sales_list')]
        ]
    deal_info = get_deal_info(deal_id)
    update.callback_query.edit_message_text(
        deal_info,
        reply_markup=InlineKeyboardMarkup(
            menu,
            resize_keyboard=True),
        parse_mode=telegram.ParseMode.MARKDOWN)


# ----------- –£—Å–ª—É–≥–∏
def button_moder_shop_sales_type_services(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    shop_id = context.user_data[SELECT_ID]
    count_dispute = get_shop_dispute_orders_count(shop_id)
    count_open = get_shop_open_orders_count(shop_id)
    count_close = get_shop_close_orders_count(shop_id)
    if count_dispute == 0 and count_open == 0 and count_close == 0:
        return update.callback_query.edit_message_text(
            f"{e_shopping_bags}  <b>–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞ {get_shop_name(shop_id)}  ({get_shop_id(shop_id)}) (—É—Å–ª—É–≥–∏)</b>\n\n–£ —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
            reply_markup=
            InlineKeyboardMarkup([[InlineKeyboardButton(
                f'{back_for_button}  –ù–∞–∑–∞–¥',
                callback_data='back_moder_shop_sales_type')]],
                resize_keyboard=True),
            parse_mode='HTML')
    menu = get_submenu_trades(count_dispute, count_open, count_close, "moder_shop_service_sales")
    update.callback_query.edit_message_text(
        f"{e_shopping_bags}  <b>–ü—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞ {get_shop_name(shop_id)}  ({get_shop_id(shop_id)}) (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∑–∞–∫–∞–∑–æ–≤</b>",
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_moder_select_service_section_dispute(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_SALE_SECTION] = "dispute"
    update.callback_query.edit_message_text(
        f"<b>–î–∏—Å–ø—É—Ç–Ω—ã (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "moder_shop_service_sales"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_moder_select_service_section_open(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_SALE_SECTION] = "open"
    update.callback_query.edit_message_text(
        f"<b>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "moder_shop_service_sales"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_moder_select_service_section_close(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_SALE_SECTION] = "close"
    update.callback_query.edit_message_text(
        f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "moder_shop_service_sales"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_moder_shop_service_sales(update, context, order_id):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    order = get_order_by_id(order_id)
    context.user_data[ORDER_ID] = order_id
    if order.call_moderator and order.status == 3:
        menu = [
            [InlineKeyboardButton(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data='moder_select_call_order_menu_tz')],
            [InlineKeyboardButton(f"–°–æ–æ–±—â–µ–Ω–∏—è", callback_data='moder_select_call_order_menu_messages'),
             InlineKeyboardButton(f"–ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑", callback_data='moder_select_call_order_menu_close')],
            [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥", callback_data='back_to_shop_service_sales_list')]
        ]
    else:
        menu = [
            [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥", callback_data='back_to_shop_service_sales_list')]
        ]
    order_info = get_order_info(order_id)
    update.callback_query.edit_message_text(
        order_info,
        reply_markup=InlineKeyboardMarkup(
            menu,
            resize_keyboard=True),
        parse_mode='HTML')


# ---------- –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---------------
def button_moder_select_user_buys(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    user_id = context.user_data[SELECT_ID]
    update.callback_query.edit_message_text(
        f"<b>–ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_user_name(user_id)}  ({get_user_id(user_id)})</b>\n\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∫—É–ø–æ–∫",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(f"üì¶  –¢–æ–≤–∞—Ä—ã",
                                  callback_data='moder_user_buys_type_products'),
             InlineKeyboardButton(f"ü§ù  –£—Å–ª—É–≥–∏",
                                  callback_data='moder_user_buys_type_services')],
            [InlineKeyboardButton(
                f'{back_for_button}  –ù–∞–∑–∞–¥',
                callback_data='back_moder_select_user_menu')]
        ],
            resize_keyboard=True),
        parse_mode='HTML')


def button_moder_user_buys_type_products(update, context):
    query = update.callback_query
    query.answer()
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    user_id = context.user_data[SELECT_ID]
    count_dispute = get_user_dispute_deals_count(user_id)
    count_open = get_user_open_deals_count(user_id)
    count_close = get_user_close_deals_count(user_id)
    if count_dispute == 0 and count_open == 0 and count_close == 0:
        return update.callback_query.edit_message_text(
            f"<b>–°–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_user_name(user_id)}  ({get_user_id(user_id)}) (—Ç–æ–≤–∞—Ä—ã)</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–µ–ª–∞–ª –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=
            InlineKeyboardMarkup([[InlineKeyboardButton(
                f'{back_for_button}  –ù–∞–∑–∞–¥',
                callback_data='back_moder_select_user_menu')]],
                resize_keyboard=True),
            parse_mode='HTML')
    menu = get_submenu_trades(count_dispute, count_open, count_close, "moder_user_buys")
    update.callback_query.edit_message_text(
        f"<b>–°–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_user_name(user_id)}  ({get_user_id(user_id)}) (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–¥–µ–ª–∫–∏</b>",
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_moder_select_user_buys_section_dispute(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_BUYS_SECTION] = "dispute"
    user_id = context.user_data[SELECT_ID]
    update.callback_query.edit_message_text(
        f"<b>–î–∏—Å–ø—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_user_name(user_id)}  ({get_user_id(user_id)}) (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "moder_user_buys"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_moder_select_user_buys_section_open(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_BUYS_SECTION] = "open"
    user_id = context.user_data[SELECT_ID]
    update.callback_query.edit_message_text(
        f"<b>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_user_name(user_id)}  ({get_user_id(user_id)}) (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "moder_user_buys"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_moder_select_user_buys_section_close(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_BUYS_SECTION] = "close"
    user_id = context.user_data[SELECT_ID]
    update.callback_query.edit_message_text(
        f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_user_name(user_id)}  ({get_user_id(user_id)}) (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "moder_user_buys"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_moder_user_buys(update, context, deal_id):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[DEAL_ID] = deal_id
    deal = get_deal_by_id(deal_id)
    if deal.call_moderator and deal.status == 2:
        menu = [
            [InlineKeyboardButton(f"–°–æ–æ–±—â–µ–Ω–∏—è", callback_data='moder_select_call_menu_messages'),
             InlineKeyboardButton(f"–¢–æ–≤–∞—Ä", callback_data='moder_select_call_menu_content')],
            [InlineKeyboardButton(f"–ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", callback_data='moder_select_call_menu_close_deal')],
            [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥", callback_data='back_to_user_buys_list')]
        ]
    else:
        menu = [
            [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥", callback_data='back_to_user_buys_list')]
        ]
    deal_info = get_deal_info(deal_id)
    update.callback_query.edit_message_text(
        deal_info,
        reply_markup=InlineKeyboardMarkup(
            menu,
            resize_keyboard=True),
        parse_mode=telegram.ParseMode.MARKDOWN)


# ------------------------------------ –ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–£—Å–ª—É–≥–∏)
def button_moder_user_buys_type_services(update, context):
    query = update.callback_query
    query.answer()
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    user_id = context.user_data[SELECT_ID]
    count_dispute = get_user_dispute_orders_count(user_id)
    count_open = get_user_open_orders_count(user_id)
    count_close = get_user_close_orders_count(user_id)
    if count_dispute == 0 and count_open == 0 and count_close == 0:
        return update.callback_query.edit_message_text(
            f"<b>–ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_user_name(user_id)}  ({get_user_id(user_id)}) (—É—Å–ª—É–≥–∏)</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–µ–ª–∞–ª –∑–∞–∫–∞–∑—ã —É—Å–ª—É–≥",
            reply_markup=
            InlineKeyboardMarkup([[InlineKeyboardButton(
                f'{back_for_button}  –ù–∞–∑–∞–¥',
                callback_data='back_moder_select_user_menu')]],
                resize_keyboard=True),
            parse_mode='HTML')
    menu = get_submenu_trades(count_dispute, count_open, count_close, "moder_user_orders")
    update.callback_query.edit_message_text(
        f"<b>–ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_user_name(user_id)}  ({get_user_id(user_id)}) (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∑–∞–∫–∞–∑–∞</b>",
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_moder_select_user_orders_section_dispute(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_BUYS_SECTION] = "dispute"
    user_id = context.user_data[SELECT_ID]
    update.callback_query.edit_message_text(
        f"<b>–î–∏—Å–ø—É—Ç–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_user_name(user_id)}  ({get_user_id(user_id)}) (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "moder_user_orders"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_moder_select_user_orders_section_open(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_BUYS_SECTION] = "open"
    user_id = context.user_data[SELECT_ID]
    update.callback_query.edit_message_text(
        f"<b>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_user_name(user_id)}  ({get_user_id(user_id)}) (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "moder_user_orders"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_moder_select_user_orders_section_close(update, context):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_BUYS_SECTION] = "close"
    user_id = context.user_data[SELECT_ID]
    update.callback_query.edit_message_text(
        f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_user_name(user_id)}  ({get_user_id(user_id)}) (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "moder_user_orders"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_moder_user_orders(update, context, order_id):
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    order = get_order_by_id(order_id)
    context.user_data[ORDER_ID] = order_id
    if order.call_moderator and order.status == 3:
        menu = [
            [InlineKeyboardButton(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data='moder_select_call_order_menu_tz')],
            [InlineKeyboardButton(f"–°–æ–æ–±—â–µ–Ω–∏—è", callback_data='moder_select_call_order_menu_messages'),
             InlineKeyboardButton(f"–ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑", callback_data='moder_select_call_order_menu_close')],
            [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥", callback_data='back_to_user_orders_list')]
        ]
    else:
        menu = [
            [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥", callback_data='back_to_user_orders_list')]
        ]
    order_info = get_order_info(order_id)
    update.callback_query.edit_message_text(
        order_info,
        reply_markup=InlineKeyboardMarkup(
            menu,
            resize_keyboard=True),
        parse_mode='HTML')


# ------------ –°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ -------------
def button_submenu_moder_calls(update, context):
    query = update.callback_query
    query.answer()
    update.callback_query.edit_message_text(
        f"   <b>–°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª</b>",
        reply_markup=InlineKeyboardMarkup(select_section_calls,
                                          resize_keyboard=True),
        parse_mode='HTML')


# ----------- –°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ –°–î–ï–õ–ö–ò ------------
def button_submenu_moder_calls_deals(update, context):
    query = update.callback_query
    query.answer()
    update.callback_query.edit_message_text(
        f"   <b>–°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ (—Å–¥–µ–ª–∫–∏)</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "deal_moder_call"),
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_deal_moder_call(update, context, deal_id):
    context.user_data[DEAL_ID] = deal_id
    deal_info = get_deal_info(deal_id)
    update.callback_query.edit_message_text(
        deal_info,
        reply_markup=InlineKeyboardMarkup(moder_select_call_menu,
                                          resize_keyboard=True),
        parse_mode=telegram.ParseMode.MARKDOWN)


def button_moder_select_call_menu_close_deal(update, context):
    if DEAL_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    if SELECT_SALE_SECTION in context.user_data:
        update.callback_query.edit_message_text(
            f"   <b>–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏</b>\n\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤ —á—å—é –ø–æ–ª—å–∑—É –∂–µ–ª–∞–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"–ú–∞–≥–∞–∑–∏–Ω–∞", callback_data='moder_select_call_menu_close_deal_shop'),
                 InlineKeyboardButton(f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—è", callback_data='moder_select_call_menu_close_deal_buyer')],
                [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥",
                                      callback_data='back_to_moder_select_sale')]
            ],
                resize_keyboard=True),
            parse_mode='HTML')
    elif SELECT_BUYS_SECTION in context.user_data:
        update.callback_query.edit_message_text(
            f"   <b>–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏</b>\n\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤ —á—å—é –ø–æ–ª—å–∑—É –∂–µ–ª–∞–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"–ú–∞–≥–∞–∑–∏–Ω–∞", callback_data='moder_select_call_menu_close_deal_shop'),
                 InlineKeyboardButton(f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—è", callback_data='moder_select_call_menu_close_deal_buyer')],
                [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥",
                                      callback_data='back_to_moder_user_select_buy')]
            ],
                resize_keyboard=True),
            parse_mode='HTML')
    else:
        update.callback_query.edit_message_text(
            f"   <b>–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏</b>\n\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤ —á—å—é –ø–æ–ª—å–∑—É –∂–µ–ª–∞–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"–ú–∞–≥–∞–∑–∏–Ω–∞", callback_data='moder_select_call_menu_close_deal_shop'),
                 InlineKeyboardButton(f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—è", callback_data='moder_select_call_menu_close_deal_buyer')],
                [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥",
                                      callback_data='back_to_select_deal_call_menu')]
            ],
                resize_keyboard=True),
            parse_mode='HTML')


def button_moder_select_call_menu_close_deal_shop(update, context):
    if DEAL_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    deal_id = context.user_data[DEAL_ID]
    d_info = get_deal_info(deal_id)
    deal_info = d_info + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n_–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –ø–æ–ª—å–∑—É –ú–∞–≥–∞–∑–∏–Ω–∞. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –ú–∞–≥–∞–∑–∏–Ω–µ_"
    deal = get_deal_by_id(deal_id)
    deal.update(status=3, messages=None)
    menu = get_buyer_deal_menu(deal, 3, context)
    menu.pop(0)
    context.bot.sendMessage(deal.buyer_id,
                            deal_info,
                            reply_markup=InlineKeyboardMarkup(menu,
                                                              resize_keyboard=True),
                            parse_mode=telegram.ParseMode.MARKDOWN)
    if deal.payment_method == 'LITECOIN':
        add_shop_balance(deal.shop_id, deal.sum_price_ltc - (deal.sum_price_ltc * commission_per_deals))
        deal_info = d_info + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n_–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∞ LITECOIN —Å—á—ë—Ç –ú–∞–≥–∞–∑–∏–Ω–∞_"
    else:
        shop = get_shop_obj(deal.shop_id)
        shop.update(freeze_guarantee=shop.freeze_guarantee - deal.sum_price_ltc,
                    guarantee=shop.guarantee + (deal.sum_price_ltc - (deal.sum_price_ltc * commission_per_deals)))
        deal_info = d_info + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n_–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É. –ì–∞—Ä–∞–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω_"
    context.bot.sendMessage(deal.shop_id,
                            deal_info,
                            parse_mode=telegram.ParseMode.MARKDOWN)
    if SELECT_SALE_SECTION in context.user_data:
        update.callback_query.edit_message_text(
            f"   <b>–°–¥–µ–ª–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–≤–∞—Ä—ã)</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É –≤ –ø–æ–ª—å–∑—É –ú–∞–≥–∞–∑–∏–Ω–∞!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥",
                                                                     callback_data='back_to_moder_select_sale')]],
                                              resize_keyboard=True),
            parse_mode='HTML')
    elif SELECT_BUYS_SECTION in context.user_data:
        update.callback_query.edit_message_text(
            f"   <b>–°–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–≤–∞—Ä—ã)</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É –≤ –ø–æ–ª—å–∑—É –ú–∞–≥–∞–∑–∏–Ω–∞!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥",
                                                                     callback_data='back_to_user_buys_list')]],
                                              resize_keyboard=True),
            parse_mode='HTML')
    else:
        update.callback_query.edit_message_text(
            f"   <b>–°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ (—Å–¥–µ–ª–∫–∏)</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É!",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "deal_moder_call"),
                                              resize_keyboard=True),
            parse_mode='HTML')


def button_moder_select_call_menu_close_deal_buyer(update, context):
    if DEAL_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    deal_id = context.user_data[DEAL_ID]
    d_info = get_deal_info(deal_id)
    deal_info = d_info + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n_–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å—á—ë—Ç LITECOIN\n" \
                         "–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –ú–∞–≥–∞–∑–∏–Ω–µ_"
    deal = get_deal_by_id(deal_id)
    deal.update(status=3, messages=None, defeat_dispute=True)
    menu = get_buyer_deal_menu(deal, 3, context)
    menu.pop(0)
    context.bot.sendMessage(deal.buyer_id,
                            deal_info,
                            reply_markup=InlineKeyboardMarkup(menu,
                                                              resize_keyboard=True),
                            parse_mode=telegram.ParseMode.MARKDOWN)
    if deal.payment_method == 'LITECOIN':
        add_user_balance(deal.buyer_id, deal.sum_price_ltc)
        deal_info = d_info + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n_–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –ø–æ–ª—å–∑—É –ü–æ–∫—É–ø–∞—Ç–µ–ª—è. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é_"
    else:
        shop = get_shop_obj(deal.shop_id)
        shop.update(freeze_guarantee=shop.freeze_guarantee - deal.sum_price_ltc)
        add_user_balance(deal.buyer_id, deal.sum_price_ltc)
        deal_info = d_info + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n_–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –ø–æ–ª—å–∑—É –ü–æ–∫—É–ø–∞—Ç–µ–ª—è. –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ —Å–ø–∏—Å–∞–Ω–∞ —Å –≤–∞—à–µ–≥–æ –≥–∞—Ä–∞–Ω—Ç–∞_"
    context.bot.sendMessage(deal.shop_id,
                            deal_info,
                            parse_mode=telegram.ParseMode.MARKDOWN)
    if SELECT_SALE_SECTION in context.user_data:
        update.callback_query.edit_message_text(
            f"   <b>–°–¥–µ–ª–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç–æ–≤–∞—Ä—ã)</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É –≤ –ø–æ–ª—å–∑—É –ü–æ–∫—É–ø–∞—Ç–µ–ª—è!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥",
                                                                     callback_data='back_to_moder_select_sale')]],
                                              resize_keyboard=True),
            parse_mode='HTML')
    elif SELECT_BUYS_SECTION in context.user_data:
        update.callback_query.edit_message_text(
            f"   <b>–°–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–≤–∞—Ä—ã)</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É –≤ –ø–æ–ª—å–∑—É –ü–æ–∫—É–ø–∞—Ç–µ–ª—è!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥",
                                                                     callback_data='back_to_user_buys_list')]],
                                              resize_keyboard=True),
            parse_mode='HTML')
    else:
        update.callback_query.edit_message_text(
            f"   <b>–°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ (—Å–¥–µ–ª–∫–∏)</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É –≤ –ø–æ–ª—å–∑—É –ü–æ–∫—É–ø–∞—Ç–µ–ª—è!",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "deal_moder_call"),
                                              resize_keyboard=True),
            parse_mode='HTML')


def button_moder_select_call_menu_content(update, context):
    if DEAL_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    deal_id = context.user_data[DEAL_ID]
    deal = get_deal_by_id(deal_id)
    context.bot.sendDocument(chat_id, deal.file_id, f"{deal.id}.{deal.count} —à—Ç.txt",
                             caption=f"–í—ã–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä [{deal.count} —à—Ç.]")
    if deal.change_file_id is not None and deal.change_count is not None:
        context.bot.sendDocument(chat_id, deal.file_id, f"{deal.id}.{deal.change_count} —à—Ç.txt",
                                 caption=f"–ó–∞–º–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ [{deal.change_count} —à—Ç.]")


def button_moder_select_call_menu_messages(update, context):
    if DEAL_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    deal_id = context.user_data[DEAL_ID]
    deal = get_deal_by_id(deal_id)
    messages_text = get_deal_messages(deal)
    menu = deepcopy(moder_select_call_menu_messages)
    if SELECT_SALE_SECTION in context.user_data:
        menu.pop(1)
        menu.append([InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥", callback_data='back_to_moder_select_sale')])
    elif SELECT_BUYS_SECTION in context.user_data:
        menu.pop(1)
        menu.append([InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥", callback_data='back_to_moder_user_select_buy')])
    update.callback_query.edit_message_text(
        f"   <b>–°–æ–æ–±—â–µ–Ω–∏—è –≤ –î–∏—Å–ø—É—Ç–µ</b>\n\n"
        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:  <b>@{get_user_tg_id(deal.buyer_id)}</b>\n"
        f"–í–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞:  <b>@{get_user_tg_id(deal.shop_id)}</b>\n\n"
        f"{messages_text}",
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


# ------------- –°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ –ó–ê–ö–ê–ó–´ --------------
def button_submenu_moder_calls_orders(update, context):
    query = update.callback_query
    query.answer()
    update.callback_query.edit_message_text(
        f"   <b>–°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ (–∑–∞–∫–∞–∑—ã)</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "order_moder_call"),
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_select_order_moder_call(update, context, order_id):
    query = update.callback_query
    query.answer()
    order = get_order_by_id(order_id)
    if order is None:
        return update.callback_query.edit_message_text(f"   <b>–°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ (–∑–∞–∫–∞–∑—ã)</b>\n\n–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    context.user_data[ORDER_ID] = order_id
    menu = deepcopy(moder_select_call_order_menu)
    if order.order_work is not None:
        menu[0].append(InlineKeyboardButton(f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑", callback_data='moder_select_call_order_menu_content'))
    update.callback_query.edit_message_text(get_order_info(order_id),
                                            reply_markup=InlineKeyboardMarkup(
                                                menu,

                                                resize_keyboard=True),
                                            parse_mode='HTML')


def button_moder_select_call_order_menu_tz(update, context):
    if ORDER_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    order_id = context.user_data[ORDER_ID]
    order = get_order_by_id(order_id)
    context.bot.sendDocument(chat_id, order.tz, caption="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É")


def button_moder_select_call_order_menu_work(update, context):
    if ORDER_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    order_id = context.user_data[ORDER_ID]
    order = get_order_by_id(order_id)
    context.bot.sendDocument(chat_id, order.order_work, caption="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑")


def button_moder_select_call_order_menu_content(update, context):
    if ORDER_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    order_id = context.user_data[ORDER_ID]
    order = get_order_by_id(order_id)
    if order.order_work is None:
        return update.callback_query.edit_message_text(
            f"{get_order_info(order_id)}"
            f"<i>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª!</i>",
            parse_mode='HTML')
    context.bot.sendDocument(chat_id, order.order_work, caption="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑")


def button_moder_select_call_order_menu_messages(update, context):
    if ORDER_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    order_id = context.user_data[ORDER_ID]
    order = get_order_by_id(order_id)
    menu = deepcopy(moder_select_call_order_menu_messages)
    if SELECT_SALE_SECTION in context.user_data:
        menu.pop(1)
        menu.append(
            [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥", callback_data='back_to_moder_select_service_sale')])
    elif SELECT_BUYS_SECTION in context.user_data:
        menu.pop(1)
        menu.append(
            [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥", callback_data='back_to_moder_user_select_orders')])
    messages_text = get_order_messages(order)
    update.callback_query.edit_message_text(
        f"   <b>–°–æ–æ–±—â–µ–Ω–∏—è –≤ –î–∏—Å–ø—É—Ç–µ</b>\n\n"
        f"–ó–∞–∫–∞–∑—á–∏–∫:  <b>@{get_user_tg_id(order.client_id)}</b>\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:  <b>@{get_user_tg_id(order.shop_id)}</b>\n\n"
        f"{messages_text}",
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_moder_select_call_order_menu_close(update, context):
    if ORDER_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    if SELECT_SALE_SECTION in context.user_data:
        update.callback_query.edit_message_text(
            f"   <b>–ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤ —á—å—é –ø–æ–ª—å–∑—É –∂–µ–ª–∞–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data='moder_select_call_order_menu_close_shop'),
                 InlineKeyboardButton(f"–ó–∞–∫–∞–∑—á–∏–∫–∞", callback_data='moder_select_call_order_menu_close_client')],
                [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥",
                                      callback_data='back_to_moder_select_service_sale')]
            ],
                resize_keyboard=True),
            parse_mode='HTML')
    elif SELECT_BUYS_SECTION in context.user_data:
        update.callback_query.edit_message_text(
            f"   <b>–ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤ —á—å—é –ø–æ–ª—å–∑—É –∂–µ–ª–∞–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data='moder_select_call_order_menu_close_shop'),
                 InlineKeyboardButton(f"–ó–∞–∫–∞–∑—á–∏–∫–∞", callback_data='moder_select_call_order_menu_close_client')],
                [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥",
                                      callback_data='back_to_moder_user_select_orders')]
            ],
                resize_keyboard=True),
            parse_mode='HTML')
    else:
        update.callback_query.edit_message_text(
            f"   <b>–ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤ —á—å—é –ø–æ–ª—å–∑—É –∂–µ–ª–∞–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data='moder_select_call_order_menu_close_shop'),
                 InlineKeyboardButton(f"–ó–∞–∫–∞–∑—á–∏–∫–∞", callback_data='moder_select_call_order_menu_close_client')],
                [InlineKeyboardButton(f"{back_for_button}  –ù–∞–∑–∞–¥",
                                      callback_data='back_to_select_order_call_menu')]
            ],
                resize_keyboard=True),
            parse_mode='HTML')


def button_moder_select_call_order_menu_close_shop(update, context):
    if ORDER_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    order_id = context.user_data[ORDER_ID]
    order = get_order_by_id(order_id)
    ord_info = get_order_info(order_id)
    order_info = ord_info + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ó–∞–∫–∞–∑ –±—ã–ª –∑–∞–∫—Ä—ã—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –ø–æ–ª—å–∑—É –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –ú–∞–≥–∞–∑–∏–Ω–µ</i>"
    order.update(status=4, messages=None)
    menu = get_client_order_menu(order_id, 4, context)
    context.bot.sendMessage(order.client_id,
                            order_info,
                            reply_markup=InlineKeyboardMarkup(menu,
                                                              resize_keyboard=True),
                            parse_mode='HTML')
    add_shop_balance(order.shop_id, order.price_ltc - (order.price_ltc * commission_per_deals))
    order_info = ord_info + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ó–∞–∫–∞–∑ –±—ã–ª –∑–∞–∫—Ä—ã—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∞ LITECOIN —Å—á—ë—Ç –ú–∞–≥–∞–∑–∏–Ω–∞</i>"

    context.bot.sendMessage(order.shop_id,
                            order_info,
                            parse_mode='HTML')

    if SELECT_SALE_SECTION in context.user_data:
        update.callback_query.edit_message_text(
            f"   <b>–ó–∞–∫–∞–∑—ã –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –ø–æ–ª—å–∑—É –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                                     callback_data='back_moder_shop_services_sales_select_section')]],
                                              resize_keyboard=True),
            parse_mode='HTML')
    elif SELECT_BUYS_SECTION in context.user_data:
        update.callback_query.edit_message_text(
            f"   <b>–ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –ø–æ–ª—å–∑—É –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                                     callback_data='back_to_user_orders_list')]],
                                              resize_keyboard=True),
            parse_mode='HTML')
    else:
        update.callback_query.edit_message_text(
            f"   <b>–°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ (–∑–∞–∫–∞–∑—ã)</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –ø–æ–ª—å–∑—É –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "order_moder_call"),
                                              resize_keyboard=True),
            parse_mode='HTML')

    now = datetime.now()
    if now > order.date_deadline:
        order.update(late_deadline=True)


def button_moder_select_call_order_menu_close_client(update, context):
    if ORDER_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    order_id = context.user_data[ORDER_ID]
    order = get_order_by_id(order_id)
    ord_info = get_order_info(order_id)
    order_info = ord_info + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ó–∞–∫–∞–∑ –±—ã–ª –∑–∞–∫—Ä—ã—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É.\n–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ LITECOIN —Å—á—ë—Ç.\n–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –ú–∞–≥–∞–∑–∏–Ω–µ</i>"
    add_user_balance(order.client_id, order.price_ltc)
    order.update(status=4, messages=None, defeat_dispute=True)
    menu = get_client_order_menu(order_id, 4, context)
    context.bot.sendMessage(order.client_id,
                            order_info,
                            reply_markup=InlineKeyboardMarkup(menu,
                                                              resize_keyboard=True),
                            parse_mode='HTML')
    order_info = ord_info + "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n<i>–ó–∞–∫–∞–∑ –±—ã–ª –∑–∞–∫—Ä—ã—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –ø–æ–ª—å–∑—É –ó–∞–∫–∞–∑—á–∏–∫–∞.\n–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –µ–≥–æ —Å—á—ë—Ç</i>"

    context.bot.sendMessage(order.shop_id,
                            order_info,
                            parse_mode='HTML')

    if SELECT_SALE_SECTION in context.user_data:
        update.callback_query.edit_message_text(
            f"   <b>–ó–∞–∫–∞–∑—ã –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –ø–æ–ª—å–∑—É –ó–∞–∫–∞–∑—á–∏–∫–∞!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                                     callback_data='back_moder_shop_services_sales_select_section')]],
                                              resize_keyboard=True),
            parse_mode='HTML')
    elif SELECT_BUYS_SECTION in context.user_data:
        update.callback_query.edit_message_text(
            f"   <b>–ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –ø–æ–ª—å–∑—É –ó–∞–∫–∞–∑—á–∏–∫–∞!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                                     callback_data='back_to_user_orders_list')]],
                                              resize_keyboard=True),
            parse_mode='HTML')
    else:
        update.callback_query.edit_message_text(
            f"   <b>–°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ (–∑–∞–∫–∞–∑—ã)</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –ø–æ–ª—å–∑—É –ó–∞–∫–∞–∑—á–∏–∫–∞!",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "order_moder_call"),
                                              resize_keyboard=True),
            parse_mode='HTML')

    now = datetime.now()
    if now > order.date_deadline:
        order.update(late_deadline=True)


# ============================================= –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ ========================================================
# ----------- –í–ù–ï–°–¢–ò LITECOIN -----------
def button_submenu_up_balance(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    user = get_user_obj(chat_id)
    if not user.coinbase_address_id:
        create_coinbase_address(chat_id)
    coinbase_address_id = get_coinbase_address_id(chat_id)
    coinbase_address = get_coinbase_address(coinbase_address_id)
    update.callback_query.edit_message_text(f'   *–í–Ω–µ—Å—Ç–∏ LITECOIN*\n\n'
                                            f'–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞ —Å–æ–∑–¥–∞–Ω –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π LITECOIN –∞–¥—Ä–µ—Å.\n\n'
                                            f'–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∞–¥—Ä–µ—Å—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∏–∂–µ\n\n'
                                            f'–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É\n*\'–ù–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥\'*\n\n'
                                            f'–í–∞—à –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—É–º–º—É! {e_smiling}',
                                            reply_markup=InlineKeyboardMarkup(up_balance_menu,
                                                                              resize_keyboard=True),
                                            parse_mode=telegram.ParseMode.MARKDOWN)
    context.bot.sendMessage(chat_id, f'<b>{coinbase_address}</b>', parse_mode='HTML')


def button_submenu_balance_menu(update, context):
    update.callback_query.edit_message_text(
        "   <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å LITECOIN</b>\n\n<b>–í–Ω–µ—Å—Ç–∏</b> - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ, –µ—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å LITECOIN\n\n"
        "<b>–ö—É–ø–∏—Ç—å</b> - –∫—É–ø–∏—Ç—å LITECOIN, –µ—Å–ª–∏ —É –≤–∞—Å –µ—â—ë –µ–≥–æ –Ω–µ—Ç",
        reply_markup=InlineKeyboardMarkup(balance_menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
def button_check_up_balance(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    address_id = get_coinbase_address_id(chat_id)
    transactions = get_transactions_list(address_id)
    sum_amount_add = get_sum_new_transactions(chat_id, transactions)
    if sum_amount_add == 0:
        update.callback_query.edit_message_text("   <b>–í–Ω–µ—Å—Ç–∏ LITECOIN</b>\n\n–ù–∏ –æ–¥–∏–Ω –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
                                                "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –ø–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ "
                                                "<b>–ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</b> —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏! <i>(–¥–æ 30 –º–∏–Ω—É—Ç)</i>",
                                                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(
                                                    f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                    callback_data='back_to_submenu_up_balance')]],
                                                    resize_keyboard=True),
                                                parse_mode='HTML')
    else:
        add_user_balance(chat_id, sum_amount_add)
        update.callback_query.edit_message_text(
            f"   <b>–í–Ω–µ—Å—Ç–∏ LITECOIN</b>\n\n–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–π–¥–µ–Ω\n–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É: <b> {sum_amount_add}</b> LITECOIN",
            reply_markup=InlineKeyboardMarkup(up_balance_menu,
                                              resize_keyboard=True),
            parse_mode='HTML')


# -------------------------------


# –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω
def button_open_shop_handler(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if check_shop_owner(chat_id) and check_shop_stop(chat_id):
        update.callback_query.edit_message_text(
            f"   <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω</b>\n\n–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'\n\n",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥', callback_data='back_to_dashboard_menu'),
                  InlineKeyboardButton(f'–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data='restore_shop')]],
                resize_keyboard=True),
            parse_mode='HTML')
    else:
        update.callback_query.edit_message_text(
            f"   <b>–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω</b>\n\n–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n\n"
            f"–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <i>'–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'</i> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ú–∞–≥–∞–∑–∏–Ω–∞",
            reply_markup=InlineKeyboardMarkup(request_open_shop_menu,
                                              resize_keyboard=True),
            parse_mode='HTML')


def button_restore_shop(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    shop_stop(chat_id, False)
    context.bot.sendMessage(chat_id,
                            f"–í–∞—à –º–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n",
                            reply_markup=update_main_menu(chat_id),
                            parse_mode='HTML')


# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
def button_up_balance_history(update, context):
    query = update.callback_query
    query.answer()
    show_list_text(update, context, "user_payments")


# --------------------- –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ -------------------------
def button_submenu_my_buys(update, context):
    update.callback_query.edit_message_text("<b>–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏</b>\n\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∫—É–ø–æ–∫",
                                            reply_markup=InlineKeyboardMarkup([
                                                [InlineKeyboardButton(f"üì¶  –¢–æ–≤–∞—Ä—ã",
                                                                      callback_data='my_buys_type_products'),
                                                 InlineKeyboardButton(f"ü§ù  –£—Å–ª—É–≥–∏",
                                                                      callback_data='my_buys_type_services')],
                                                [InlineKeyboardButton(
                                                    f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                    callback_data='back_to_dashboard_menu')]
                                            ],
                                                resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_buys_type_products(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    count_dispute = get_user_dispute_deals_count(chat_id)
    count_open = get_user_open_deals_count(chat_id)
    count_close = get_user_close_deals_count(chat_id)
    if count_dispute == 0 and count_open == 0 and count_close == 0:
        return update.callback_query.edit_message_text(
            "üì¶  <b>–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ (—Ç–æ–≤–∞—Ä—ã)</b>\n\n–í—ã –Ω–µ –¥–µ–ª–∞–ª–∏ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=
            InlineKeyboardMarkup([[InlineKeyboardButton(
                f'{back_for_button}  –ù–∞–∑–∞–¥',
                callback_data='back_my_buys_select_type')]],
                resize_keyboard=True),
            parse_mode='HTML')
    menu = get_submenu_trades(count_dispute, count_open, count_close, "my_buys")
    update.callback_query.edit_message_text(
        "üì¶  <b>–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<u>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</u> - –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n\n"
        "<u>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</u> -  –ø–æ–∫—É–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —è–≤–ª—è—é—Ç—Å—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏, –æ–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ "
        "—Ç–æ–≤–∞—Ä–∞, –ª–∏–±–æ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.\n\n"
        "<u>–î–∏—Å–ø—É—Ç—ã</u> - –ø–æ–∫—É–ø–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–≤–∞—Ä–æ–º.\n\n"
        "<b>‚ùì –ö–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>",
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_my_buys_select_section_dispute(update, context):
    context.user_data[SELECT_BUYS_SECTION] = "dispute"
    update.callback_query.edit_message_text(
        f"<b>–î–∏—Å–ø—É—Ç–Ω—ã (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "my_buys"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_my_buys_select_section_open(update, context):
    context.user_data[SELECT_BUYS_SECTION] = "open"
    update.callback_query.edit_message_text(
        f"<b>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "my_buys"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_my_buys_select_section_close(update, context):
    context.user_data[SELECT_BUYS_SECTION] = "close"
    update.callback_query.edit_message_text(
        f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "my_buys"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_select_my_buy(update, context, deal_id):
    deal_info = get_deal_info(deal_id)
    deal = get_deal_by_id(deal_id)
    context.user_data[DEAL_ID] = deal_id
    menu = get_buyer_deal_menu(deal, deal.status, context)
    update.callback_query.edit_message_text(
        deal_info,
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode=telegram.ParseMode.MARKDOWN)


# -------------------- –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ -> –£—Å–ª—É–≥–∏
def button_my_buys_type_services(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    count_dispute = get_user_dispute_orders_count(chat_id)
    count_open = get_user_open_orders_count(chat_id)
    count_close = get_user_close_orders_count(chat_id)
    if count_dispute == 0 and count_open == 0 and count_close == 0:
        return update.callback_query.edit_message_text("<b>ü§ù  –ú–æ–∏ –∑–∞–∫–∞–∑—ã (–£—Å–ª—É–≥–∏)</b>\n\n–í—ã –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑—ã —É—Å–ª—É–≥",
                                                       reply_markup=
                                                       InlineKeyboardMarkup([[InlineKeyboardButton(
                                                           f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                           callback_data='back_my_buys_select_type')]],
                                                           resize_keyboard=True),
                                                       parse_mode='HTML')
    menu = get_submenu_trades(count_dispute, count_open, count_close, "my_buys_service")
    update.callback_query.edit_message_text(
        "<b>ü§ù  –ú–æ–∏ –∑–∞–∫–∞–∑—ã (–£—Å–ª—É–≥–∏)</b>\n\n<u>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</u> -  –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n\n"
        "<u>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</u> -  –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —è–≤–ª—è—é—Ç—Å—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏, –æ–±—ã—á–Ω–æ —ç—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç, "
        "–ª–∏–±–æ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.\n\n"
        "<u>–î–∏—Å–ø—É—Ç—ã</u> - –ø–æ–∫—É–ø–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫–∞–∑–æ–º.\n\n"
        "<b>‚ùì –ö–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>",
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_my_orders_service_select_section_dispute(update, context):
    context.user_data[SELECT_BUYS_SECTION] = "dispute"
    update.callback_query.edit_message_text(
        f"<b>–î–∏—Å–ø—É—Ç–Ω—ã (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "my_buys_service"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_my_orders_service_select_section_open(update, context):
    context.user_data[SELECT_BUYS_SECTION] = "open"
    update.callback_query.edit_message_text(
        f"<b>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "my_buys_service"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_my_orders_service_select_section_close(update, context):
    context.user_data[SELECT_BUYS_SECTION] = "close"
    update.callback_query.edit_message_text(
        f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "my_buys_service"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_select_my_order(update, context, order_id):
    order_info = get_order_info(order_id)
    order = get_order_by_id(order_id)
    context.user_data[ORDER_ID] = order_id
    menu = get_client_order_menu(order_id, order.status, context)
    update.callback_query.edit_message_text(
        order_info,
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


# =================================================== –ú–û–ô –ú–ê–ì–ê–ó–ò–ù ======================================================
def button_my_shop_handler(update, context):
    chat_id = update.message.chat_id
    text = get_shop_info_text(chat_id, chat_id)
    update.message.reply_text(text,
                              reply_markup=InlineKeyboardMarkup(my_shop_menu,
                                                                resize_keyboard=True),
                              parse_mode='HTML')


# ===================== –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏ ======================
def button_my_shop_submenu_trades(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    open_deals = count_open_deals(chat_id)
    open_orders = count_open_sh_orders(chat_id)
    update.callback_query.edit_message_text(f"{e_shopping_bags}  <b>–ü—Ä–æ–¥–∞–∂–∏</b>\n\n"
                                            "–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏:\n"
                                            f"\t\t–¢–æ–≤–∞—Ä—ã - <b>{open_deals}</b>\n"
                                            f"\t\t–£—Å–ª—É–≥–∏ - <b>{open_orders}</b>\n\n"
                                            f"‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥–∞–∂:</b>",
                                            reply_markup=InlineKeyboardMarkup([
                                                [InlineKeyboardButton(f"üì¶  –¢–æ–≤–∞—Ä—ã",
                                                                      callback_data='my_sales_type_products'),
                                                 InlineKeyboardButton(f"ü§ù  –£—Å–ª—É–≥–∏",
                                                                      callback_data='my_sales_type_services')],
                                                [InlineKeyboardButton(
                                                    f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                    callback_data='back_to_my_shop_menu')]
                                            ],
                                                resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_sales_type_products(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    count_dispute = get_shop_dispute_deals_count(chat_id)
    count_open = get_shop_open_deals_count(chat_id)
    count_close = get_shop_close_deals_count(chat_id)
    if count_dispute == 0 and count_open == 0 and count_close == 0:
        return update.callback_query.edit_message_text("<b>üì¶  –ü—Ä–æ–¥–∞–∂–∏ (–¢–æ–≤–∞—Ä—ã)</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–æ–≤",
                                                       reply_markup=
                                                       InlineKeyboardMarkup([[InlineKeyboardButton(
                                                           f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                           callback_data='back_my_sales_select_type')]],
                                                           resize_keyboard=True),
                                                       parse_mode='HTML')
    menu = get_submenu_trades(count_dispute, count_open, count_close, "my_sales")
    update.callback_query.edit_message_text(
        "<b>üì¶  –ü—Ä–æ–¥–∞–∂–∏ (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<u>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</u> - –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –≤ –≤–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ.\n\n"
        "<u>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</u> -  –ø—Ä–æ–¥–∞–∂–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —è–≤–ª—è—é—Ç—Å—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏, –æ–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ "
        "—Ç–æ–≤–∞—Ä–∞, –ª–∏–±–æ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.\n\n"
        "<u>–î–∏—Å–ø—É—Ç—ã</u> - –ø—Ä–æ–¥–∞–∂–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É –∫–ª–∏–µ–Ω—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞—à–∏–º —Ç–æ–≤–∞—Ä–æ–º.\n\n"
        "<b>‚ùì –ö–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>",
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_my_sales_select_section_dispute(update, context):
    context.user_data[SELECT_SALE_SECTION] = "dispute"
    update.callback_query.edit_message_text(
        f"<b>–î–∏—Å–ø—É—Ç–Ω—ã (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "my_sales"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_my_sales_select_section_open(update, context):
    context.user_data[SELECT_SALE_SECTION] = "open"
    update.callback_query.edit_message_text(
        f"<b>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "my_sales"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_my_sales_select_section_close(update, context):
    context.user_data[SELECT_SALE_SECTION] = "close"
    update.callback_query.edit_message_text(
        f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (—Ç–æ–≤–∞—Ä—ã)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "my_sales"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_select_my_sale(update, context, deal_id):
    deal_info = get_deal_info(deal_id)
    deal = get_deal_by_id(deal_id)
    context.user_data[DEAL_ID] = deal_id
    menu = get_shop_deal_menu(deal.status, deal, context)
    update.callback_query.edit_message_text(
        deal_info,
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode=telegram.ParseMode.MARKDOWN)


# ------------- –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏ (—É—Å–ª—É–≥–∏)
def button_my_sales_type_services(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    count_dispute = get_shop_dispute_orders_count(chat_id)
    count_open = get_shop_open_orders_count(chat_id)
    count_close = get_shop_close_orders_count(chat_id)
    if count_dispute == 0 and count_open == 0 and count_close == 0:
        return update.callback_query.edit_message_text("<b>–ó–∞–∫–∞–∑—ã (—É—Å–ª—É–≥–∏)</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂ —É—Å–ª—É–≥",
                                                       reply_markup=
                                                       InlineKeyboardMarkup([[InlineKeyboardButton(
                                                           f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                           callback_data='back_my_sales_select_type')]],
                                                           resize_keyboard=True),
                                                       parse_mode='HTML')
    menu = get_submenu_trades(count_dispute, count_open, count_close, "my_sales_service")
    update.callback_query.edit_message_text(
        "<b>ü§ù –ó–∞–∫–∞–∑—ã (–£—Å–ª—É–≥–∏)</b>\n\n<u>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</u> -  –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –≤ –≤–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ.\n\n"
        "<u>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</u> -  –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —è–≤–ª—è—é—Ç—Å—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏, –æ–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç, "
        "–ª–∏–±–æ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.\n\n"
        "<u>–î–∏—Å–ø—É—Ç—ã</u> - –ø—Ä–æ–¥–∞–∂–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É –∫–ª–∏–µ–Ω—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞—à–µ–π —É—Å–ª—É–≥–æ–π.\n\n"
        "<b>‚ùì –ö–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</b>",
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_my_service_sales_select_section_dispute(update, context):
    context.user_data[SELECT_SALE_SECTION] = "dispute"
    update.callback_query.edit_message_text(
        f"<b>–î–∏—Å–ø—É—Ç—ã (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "my_service_sales"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_my_service_sales_select_section_open(update, context):
    context.user_data[SELECT_SALE_SECTION] = "open"
    update.callback_query.edit_message_text(
        f"<b>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "my_service_sales"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_my_service_sales_select_section_close(update, context):
    context.user_data[SELECT_SALE_SECTION] = "close"
    update.callback_query.edit_message_text(
        f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—É—Å–ª—É–≥–∏)</b>\n\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑</b>",
        reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, "my_service_sales"),
                                          resize_keyboard=True), parse_mode='HTML')


def button_select_my_service_sale(update, context, order_id):
    order_info = get_order_info(order_id)
    order = get_order_by_id(order_id)
    context.user_data[ORDER_ID] = order_id
    menu = get_shop_order_menu(order_id, order.status, context)
    update.callback_query.edit_message_text(
        order_info,
        reply_markup=InlineKeyboardMarkup(menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


#  ------------------------  –ú–û–ô –ú–ê–ì–ê–ó–ò–ù -> –§–ò–ù–ê–ù–°–´ ------------------
def button_my_shop_submenu_finance(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    text = get_myshop_finance_text(chat_id)
    update.callback_query.edit_message_text(text,
                                            reply_markup=InlineKeyboardMarkup(my_shop_submenu_finance,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_finance_guarantee(update, context):
    update.callback_query.edit_message_text(f"{e_handshake}   <b>–ì–∞—Ä–∞–Ω—Ç</b>\n\n"
                                            f"<b>–ì–∞—Ä–∞–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —É—Ä–æ–≤–Ω–µ–º –¥–æ–≤–µ—Ä–∏—è –∫ –º–∞–≥–∞–∑–∏–Ω—É, –≤–Ω–æ—Å–∏—Ç—Å—è –ø–æ –∂–µ–ª–∞–Ω–∏—é.</b>\n\n"
                                            f"<b>–ú–∞–≥–∞–∑–∏–Ω—ã —Å  –≥–∞—Ä–∞–Ω—Ç–æ–º –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.</b>\n\n"
                                            f"<b>–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≥–∞—Ä–∞–Ω—Ç–∞ , –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ –ª–∏—á–Ω—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç.</b>\n\n"
                                            f"‚ö†  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥–∞—Ä–∞–Ω—Ç–∞ = {min_guarantee} LTC\n\n"
                                            f"‚ùì –•–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –≥–∞—Ä–∞–Ω—Ç?",
                                            reply_markup=InlineKeyboardMarkup(my_shop_finance_guarantee,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_finance_guarantee_up(update, context):
    query = update.callback_query
    query.answer()
    update.callback_query.edit_message_text(
        f"{e_handshake}   <b>–í–Ω–µ—Å–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∞</b>\n\n"
        "–í–∞—à –≥–∞—Ä–∞–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –≥–¥–µ –≤—ã –ø—Ä–æ–¥–∞–µ—Ç–µ —Ç–æ–≤–∞—Ä.\n\n"
        "–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ–∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º, ¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª –≤–ø—Ä–∞–≤–µ –≤–æ–∑–º–µ—Å—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –∏–∑ –¥–µ–ø–æ–∑–∏—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∞.\n\n"
        "–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–∞–∫–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –º–Ω–æ–≥–æ, —Ç–æ —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–µ–ª–∏—Ç—Å—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ –≤ —Ä–∞–≤–Ω—ã—Ö –¥–æ–ª—è—Ö —Å–æ–≥–ª–∞—Å–Ω–æ —Å—É–º–º–µ –∏—Ö –ø–æ—Ç–µ—Ä—å.\n\n"
        "–í—ã–≤–µ—Å—Ç–∏ –≥–∞—Ä–∞–Ω—Ç –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.\n\n"
        f"<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–∞—Ä–∞–Ω—Ç -</b>  {min_guarantee}  LTC",
        reply_markup=InlineKeyboardMarkup(my_shop_finance_guarantee_up_menu,
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_my_shop_finance_operations(update, context):
    query = update.callback_query
    query.answer()
    show_list_text(update, context, "shop_operations")


def button_my_shop_finance_requisites(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if get_guarantee_shop(chat_id) < min_guarantee:
        context.bot.sendMessage(chat_id,
                                f"<b>–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç</b>\n–ù–∞ —Å—á–µ—Ç—É –≥–∞—Ä–∞–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_guarantee} LITECOIN",
                                parse_mode='HTML')
        return
    update.callback_query.edit_message_text(f"{e_credit_card}   <b>–ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>\n\n"
                                            f"<i>–£–∫–∞–∑–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –º–æ–∂–Ω–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ —Å—á–µ—Ç—É "
                                            f"–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–∞—Ä–∞–Ω—Ç–∞</i> - <b>{min_guarantee}</b> LITECOIN\n\n"
                                            f"–ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ –≥–∞—Ä–∞–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>–Ω–µ —Å–º–æ–∂–µ—Ç</b> –≤—ã–±—Ä–∞—Ç—å –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ\n\n"
                                            f"‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                                            reply_markup=InlineKeyboardMarkup(my_shop_finance_requisites,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_finance_requisites_all(update, context):
    query = update.callback_query
    query.answer()
    update.callback_query.edit_message_text(f"{e_credit_card}   <b>–ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>\n\n"
                                            f"‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                                            reply_markup=InlineKeyboardMarkup(
                                                show_list_menu(update, context, "requisites"),
                                                resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_finance_requisites_select(update, context, select_id):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    requisite_info = get_requisite_info(owner_id, select_id)
    context.user_data[SELECT_ID] = select_id
    update.callback_query.edit_message_text(f"{e_credit_card}   <b>–ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>\n\n"
                                            f"{requisite_info}",
                                            reply_markup=InlineKeyboardMarkup(my_shop_finance_requisites_select_menu,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_finance_requisites_select_edit(update, context):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    select_id = context.user_data[SELECT_ID]
    requisite_info = get_requisite_info(owner_id, select_id)
    update.callback_query.edit_message_text(f"{e_credit_card}   <b>–ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>\n\n"
                                            f"{requisite_info}\n\n"
                                            f"–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                                            reply_markup=InlineKeyboardMarkup(
                                                my_shop_finance_requisites_select_edit_menu,
                                                resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_finance_requisites_select_del(update, context):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    if SELECT_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    select_id = context.user_data[SELECT_ID]
    delete_shop_requisite(owner_id, select_id)
    context.bot.sendMessage(owner_id, '<b>–†–µ–∫–≤–∏–∑–∏—Ç</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', parse_mode='HTML')
    update.callback_query.edit_message_text(f"{e_credit_card}   <b>–ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>\n\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                                            reply_markup=InlineKeyboardMarkup(my_shop_finance_requisites,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_finance_withdrawal(update, context):
    query = update.callback_query
    query.answer()
    update.callback_query.edit_message_text(f"{e_dollar_banknote}   <b>–í—ã–≤–æ–¥</b>\n\n‚ùì –ö—É–¥–∞ –∂–µ–ª–∞–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ LITECOIN?",
                                            reply_markup=InlineKeyboardMarkup(my_shop_finance_withdrawal,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


# --------------------------------- –ú–û–ô –ú–ê–ì–ê–ó–ò–ù -> –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã ---------------------------
def button_my_shop_submenu_products(update, context):
    query = update.callback_query
    query.answer()
    update.callback_query.edit_message_text(
        f"   <b>üì¶  –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã</b>\n\n–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ <b>–¥–æ–±–∞–≤–∏—Ç—å</b> –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä, –ª–∏–±–æ <b>—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</b> —É–∂–µ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä.\n\n"
        f"<b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> - –ï—Å–ª–∏ –≤—ã –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—ë –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é.\n\n"
        f"–ü–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ.\n\n"
        f"<b>‚ùì –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä, –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?</b>",
        reply_markup=InlineKeyboardMarkup(my_shop_submenu_products,
                                          resize_keyboard=True),
        parse_mode='HTML')


# –ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
def button_my_shop_products_add(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    context.user_data[CATEGORY_INFO] = {}
    context.user_data[DATA] = 'add'
    update.callback_query.edit_message_text(f"   <b>‚ûï  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:</b>",
                                            reply_markup=InlineKeyboardMarkup(
                                                get_subcat_btnlist_by_catid(context, None, context.user_data[DATA],
                                                                            chat_id),
                                                resize_keyboard=True),
                                            parse_mode='HTML')


# –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def button_select_product_cat(update, context, cat_id):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if CATEGORY_INFO not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    cat = ProductCategory.objects(id=cat_id).first()
    if 'cat_path' in context.user_data[CATEGORY_INFO] and context.user_data[CATEGORY_INFO]['cat_path'].find(
            cat.name) == -1:
        context.user_data[CATEGORY_INFO]['cat_path'] += "\t\t\t\t -> <b>" + cat.name + "</b>\n"
    else:
        context.user_data[CATEGORY_INFO]['cat_path'] = "\t\t<b>" + cat.name + "</b>\n"
    cat_path_text = ""
    if 'cat_path' in context.user_data[CATEGORY_INFO]:
        cat_path_text = "\n\n<u>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</u>\n" + context.user_data[CATEGORY_INFO]['cat_path']
    head = ''
    input_info = ''
    sub_cats = ProductCategory.objects(sub_id=cat_id)

    if context.user_data[DATA] == 'add':
        if not sub_cats:
            head = "<b>‚ûï  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>"
            input_info = "\n‚ùì <b>–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é?</b>"
        else:
            head = "<b>‚ûï  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>"
            input_info = "\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:</b>"
    elif context.user_data[DATA] == 'my_list':
        if not sub_cats:
            head = f"<b>{e_page}  –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä</b>"
            input_info = "\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>"
        else:
            head = f"<b>{e_page}  –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä</b>"
            input_info = "\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:</b>"
    elif context.user_data[DATA] == 'for_user':
        if not sub_cats:
            head = "üè™<b>–ú–∞–≥–∞–∑–∏–Ω—ã</b>\n\n" \
                   "üõç –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞—é—Ç –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä.\n\n" \
                   "‚ö† <u>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã</u>, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –æ—Ç–∑—ã–≤—ã –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –∏ —Ä–µ–π—Ç–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–∞." \
                   "–ö–∞–∂–¥—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü –≤–ø—Ä–∞–≤–µ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –ª—é–±—É—é —Ü–µ–Ω—É –∑–∞ —Ç–æ–≤–∞—Ä."
            input_info = "\n‚úÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:</b>"
        else:
            head = f"<b>üì¶ –¢–æ–≤–∞—Ä—ã</b>\n\n" \
                   "üìÇ –í—ã –≤–∏–¥–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–∞ —Ä—ã–Ω–∫–µ.\n\n" \
                   "‚ö† –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞, –Ω–∞—Ä—É—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –±–µ–∑ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤."
            input_info = "\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:</b>"
    elif context.user_data[DATA] == 'select_shop_prods':
        if not sub_cats:
            head = f"<b>üì¶ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n" \
                   "üìÇ –í—ã –≤–∏–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
            input_info = "\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>"
        else:
            head = f"<b>üì¶ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n" \
                   "üìÇ –í—ã –≤–∏–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞.\n\n" \
                   "‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞, –Ω–∞—Ä—É—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –±–µ–∑ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤."
            input_info = "\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:</b>"
    update.callback_query.edit_message_text(f" {head}{cat_path_text}{input_info}",
                                            reply_markup=InlineKeyboardMarkup(
                                                get_subcat_btnlist_by_catid(context, cat_id, context.user_data[DATA],
                                                                            chat_id),
                                                resize_keyboard=True),
                                            parse_mode='HTML')


# –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def button_my_shop_products_list(update, context):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    context.user_data[CATEGORY_PRODS] = []
    context.user_data[CATEGORY_INFO] = {}
    get_cat_my_products_tree(context, update, owner_id)
    context.user_data[DATA] = 'my_list'
    update.callback_query.edit_message_text(
        f"   <b>{e_page}  –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä</b>\n\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:</b>",
        reply_markup=InlineKeyboardMarkup(
            get_subcat_btnlist_by_catid(context, None, context.user_data[DATA],
                                        owner_id),
            resize_keyboard=True),
        parse_mode='HTML')


# –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
def button_select_my_product(update, context, product_id):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    if CATEGORY_INFO not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_PROD_ID] = product_id
    product_info = get_product_info(owner_id, context, product_id)
    update.callback_query.edit_message_text(f"   <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º</b>{product_info}",
                                            reply_markup=InlineKeyboardMarkup(my_shop_submenu_products_prod_menu,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_select_product(update, context, product_id):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if CATEGORY_INFO not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[SELECT_PROD_ID] = product_id
    product_info = get_product_info(chat_id, context, product_id)
    update.callback_query.edit_message_text(f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>{product_info}",
                                            reply_markup=InlineKeyboardMarkup(market_select_prod_menu,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_products_prod_edit(update, context):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    if SELECT_PROD_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    product_id = context.user_data[SELECT_PROD_ID]
    product_info = get_product_info(owner_id, context, product_id)
    update.callback_query.edit_message_text(f"{e_pencil}   <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>{product_info}",
                                            reply_markup=InlineKeyboardMarkup(my_shop_product_edit_menu,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_products_prod_del(update, context):
    query = update.callback_query
    query.answer()
    if SELECT_PROD_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    update.callback_query.edit_message_text(f"{e_cross_mark}   <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                                            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?\n\n"
                                            f"<b>–í—Å–µ –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã!</b>",
                                            reply_markup=InlineKeyboardMarkup(my_shop_products_prod_del_accept,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_products_prod_del_accept(update, context):
    query = update.callback_query
    query.answer()
    if SELECT_PROD_ID not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    product_id = context.user_data[SELECT_PROD_ID]
    product_del(product_id)
    update.callback_query.edit_message_text(f"{e_cross_mark}   <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
                                            f"–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n",
                                            reply_markup=InlineKeyboardMarkup(
                                                [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                                       callback_data='back_to_my_shop_submenu_products')]],
                                                resize_keyboard=True),
                                            parse_mode='HTML')


# ------------- –ú–û–ò –£–°–õ–£–ì–ò -------------------------
def button_my_shop_submenu_services(update, context):
    query = update.callback_query
    query.answer()
    update.callback_query.edit_message_text(
        f"ü§ù  <b>–ú–æ–∏ —É—Å–ª—É–≥–∏</b>\n\n–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ <b>–¥–æ–±–∞–≤–∏—Ç—å</b> –Ω–æ–≤—É—é —É—Å–ª—É–≥—É, –ª–∏–±–æ <b>—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</b> —É–∂–µ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —É—Å–ª—É–≥—É.\n\n"
        f"<b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b> - –ï—Å–ª–∏ –≤—ã –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—ë –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é.\n\n"
        f"–ü–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ.\n\n"
        f"<b>‚ùì –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É?</b>",
        reply_markup=InlineKeyboardMarkup(my_shop_submenu_services,
                                          resize_keyboard=True),
        parse_mode='HTML')


def button_my_shop_services_add(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    context.user_data[CATEGORY_INFO] = {}
    context.user_data[DATA] = 'add_service'
    update.callback_query.edit_message_text(f"<b>‚ûï  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏</b>\n\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:</b>",
                                            reply_markup=InlineKeyboardMarkup(
                                                get_subcat_service_btnlist_by_catid(context, None,
                                                                                    context.user_data[DATA],
                                                                                    chat_id),
                                                resize_keyboard=True),
                                            parse_mode='HTML')


def button_select_serv_cat(update, context, cat_id):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if CATEGORY_INFO not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    cat = ServiceCategory.objects(id=cat_id).first()
    if 'cat_path' in context.user_data[CATEGORY_INFO] and context.user_data[CATEGORY_INFO]['cat_path'].find(
            cat.name) == -1:
        context.user_data[CATEGORY_INFO]['cat_path'] += "\t\t\t\t -> <b>" + cat.name + "</b>\n"
    else:
        context.user_data[CATEGORY_INFO]['cat_path'] = "\t\t<b>" + cat.name + "</b>\n"
    cat_path_text = ""
    if 'cat_path' in context.user_data[CATEGORY_INFO]:
        cat_path_text = "\n\n<u>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</u>\n" + context.user_data[CATEGORY_INFO]['cat_path']
    head = ''
    chapter = ''
    sub_cats = ServiceCategory.objects(sub_id=cat_id)
    if context.user_data[DATA] == 'add_service':
        if not sub_cats:
            head = "<b>‚ûï  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏</b>"
            chapter = "\n‚ùì <b>–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é?</b>"
        else:
            head = "<b>‚ûï  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏</b>"
            chapter = "\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:</b>"
    elif context.user_data[DATA] == 'my_list_services':
        if not sub_cats:
            head = f"<b>{e_page}  –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É</b>"
            chapter = "\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:</b>"
        else:
            head = f"<b>{e_page}  –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É</b>"
            chapter = "\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:</b>"
    elif context.user_data[DATA] == 'for_user_services':
        if not sub_cats:
            head = "<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>\n\nüë§ –≠—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑.\n\n" \
                   "‚ö†  –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞, –Ω–∞—Ä—É—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –±–µ–∑ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤."
            chapter = f"\n‚úÖ  <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞:</b>"
        else:
            head = f"ü§ù  <b>–£—Å–ª—É–≥–∏</b>\n\n" \
                   f"‚ö†  –§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã –æ—Ñ–æ—Ä–º–ª—è—é—Ç —Å–≤–æ–∏ —É—Å–ª—É–≥–∏ –≤ –≤–∏–¥–µ –æ–±—å—è–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –æ–¥–∏–Ω –∫–ª–∏–∫. –¢–æ –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø—Ä–æ–¥–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–æ–≤–∞—Ä, –∞ —ç—Ç–æ —ç–∫–æ–Ω–æ–º–∏—Ç –º–∞—Å—Å—É –≤—Ä–µ–º–µ–Ω–∏, –¥–µ–Ω–µ–≥ –∏ –Ω–µ—Ä–≤–æ–≤. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á: –ª–æ–≥–æ—Ç–∏–ø—ã, –±–∞–Ω–Ω–µ—Ä—ã, SEO –∏ –¥—Ä."
            chapter = f"\n<b>–ö–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç‚ùì</b>"
    elif context.user_data[DATA] == 'select_shop_services':
        if not sub_cats:
            head = "ü§ù  <b>–£—Å–ª—É–≥–∏ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n" \
                   "üìÇ –í—ã –≤–∏–¥–∏—Ç–µ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–∞–≥–∞–∑–∏–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
            chapter = f"\n<b>‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:</b>"
        else:
            head = "ü§ù  <b>–£—Å–ª—É–≥–∏ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n" \
                   "üìÇ –í—ã –≤–∏–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω."
            chapter = f"\n<b>–ö–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç‚ùì</b>"
    update.callback_query.edit_message_text(f" {head}{cat_path_text}{chapter}",
                                            reply_markup=InlineKeyboardMarkup(
                                                get_subcat_service_btnlist_by_catid(context, cat_id,
                                                                                    context.user_data[DATA],
                                                                                    chat_id),
                                                resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_services_list(update, context):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    context.user_data[CATEGORY_SERVICES] = []
    context.user_data[CATEGORY_INFO] = {}
    get_cat_my_services_tree(context, update, owner_id)
    context.user_data[DATA] = 'my_list_services'
    update.callback_query.edit_message_text(f"<b>{e_page}  –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É</b>\n\n‚ùì <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:</b>",
                                            reply_markup=InlineKeyboardMarkup(
                                                get_subcat_service_btnlist_by_catid(context, None,
                                                                                    context.user_data[DATA],
                                                                                    owner_id),
                                                resize_keyboard=True),
                                            parse_mode='HTML')


def button_select_my_service(update, context, service_id):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    context.user_data[SELECT_SERV_ID] = service_id
    serv_info = get_service_info(owner_id, context, service_id)
    picture_id = get_service_picture_id(service_id)
    context.bot.sendPhoto(owner_id, picture_id)
    context.bot.sendMessage(owner_id, f"   <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–æ–π</b>{serv_info}",
                            reply_markup=InlineKeyboardMarkup(my_shop_select_service_menu,
                                                              resize_keyboard=True),
                            parse_mode='HTML')


def button_my_shop_service_menu_edit(update, context):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(owner_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    service_id = context.user_data[SELECT_SERV_ID]
    serv_info = get_service_info(owner_id, context, service_id)
    context.bot.sendMessage(owner_id, f"{e_pencil}  <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏</b>{serv_info}",
                            reply_markup=InlineKeyboardMarkup(my_shop_select_service_menu_edit,
                                                              resize_keyboard=True),
                            parse_mode='HTML')


def button_my_shop_service_menu_packets(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.bot.sendMessage(chat_id, f"   <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤</b>\n\n"
                                     f"–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã –∫ —Å–≤–æ–µ–π —É—Å–ª—É–≥–∏ (–≠–∫–æ–Ω–æ–º, –°—Ç–∞–Ω–¥–∞—Ä—Ç, –ë–∏–∑–Ω–µ—Å)\n\n"
                                     f"–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞ –≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å:\n"
                                     f"1) –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç\n"
                                     f"2) –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞\n\n",
                            reply_markup=InlineKeyboardMarkup(
                                get_my_service_packets_menu(update, context, chat_id, "my_service"),
                                resize_keyboard=True),
                            parse_mode='HTML')


def button_my_shop_service_menu_portfolio(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    service = get_service_by_id(context.user_data[SELECT_SERV_ID])
    portfolio = service.portfolio
    if portfolio is None:
        context.bot.sendMessage(chat_id, "–í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–µ\n\n"
                                         "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>", parse_mode='HTML')
    else:
        context.bot.sendDocument(chat_id, portfolio,
                                 caption=f"–í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏")


def button_my_shop_service_menu_delete(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    service_id = context.user_data[SELECT_SERV_ID]
    context.bot.sendMessage(chat_id, "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b> –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É?",
                            reply_markup=InlineKeyboardMarkup(
                                [[InlineKeyboardButton(f'{back_for_button}  –û—Ç–º–µ–Ω–∞',
                                                       callback_data='back_to_my_shop_select_service_menu'),
                                  InlineKeyboardButton(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                                       callback_data=f'my_shop_products_prod_del_accept_{service_id}')]],
                                resize_keyboard=True),
                            parse_mode='HTML')


def button_my_shop_service_menu_del_accept(update, context, service_id):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    service = get_service_by_id(service_id)
    service.delete()
    context.bot.sendMessage(chat_id, "–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    context.bot.sendMessage(chat_id,
                            f"ü§ù  <b>–ú–æ–∏ —É—Å–ª—É–≥–∏</b>\n\n‚ùì  –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É?",
                            reply_markup=InlineKeyboardMarkup(my_shop_submenu_services,
                                                              resize_keyboard=True),
                            parse_mode='HTML')


def button_service_edit_packet_eco(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[DATA] = "edit_eco"
    service_id = context.user_data[SELECT_SERV_ID]
    service = get_service_by_id(service_id)
    update.callback_query.edit_message_text(f'{e_pencil}  <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ "–≠–∫–æ–Ω–æ–º"</b>\n\n'
                                            f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>  {service.eco_price} ‚ÇΩ\n\n'
                                            f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>  {service.eco_description}\n\n'
                                            f'<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>  {service.eco_deadline} –¥–Ω–µ–π',
                                            reply_markup=InlineKeyboardMarkup(my_shop_service_edit_packet,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_service_edit_packet_standart(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[DATA] = "edit_standart"
    service_id = context.user_data[SELECT_SERV_ID]
    service = get_service_by_id(service_id)
    update.callback_query.edit_message_text(f'{e_pencil}  <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ "–°—Ç–∞–Ω–¥–∞—Ä—Ç"</b>\n\n'
                                            f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>  {service.standart_price} ‚ÇΩ\n\n'
                                            f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>  {service.standart_description}\n\n'
                                            f'<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>  {service.standart_deadline} –¥–Ω–µ–π',
                                            reply_markup=InlineKeyboardMarkup(my_shop_service_edit_packet,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_service_edit_packet_biz(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    context.user_data[DATA] = "edit_biz"
    service_id = context.user_data[SELECT_SERV_ID]
    service = get_service_by_id(service_id)
    update.callback_query.edit_message_text(f'{e_pencil}  <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ "–ë–∏–∑–Ω–µ—Å"</b>\n\n'
                                            f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>  {service.biz_price} ‚ÇΩ\n\n'
                                            f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>  {service.biz_description}'
                                            f'<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>  {service.biz_deadline} –¥–Ω–µ–π',
                                            reply_markup=InlineKeyboardMarkup(my_shop_service_edit_packet,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_service_edit_packet_del(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat.id
    if SELECT_SERV_ID not in context.user_data:
        return context.bot.sendMessage(chat_id, "–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    if context.user_data[DATA] == "edit_eco":
        service_id = context.user_data[SELECT_SERV_ID]
        service = get_service_by_id(service_id)
        service.update(eco_description=None, eco_price=None)
        update.callback_query.edit_message_text(f"{e_pencil}   <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ '–≠–∫–æ–Ω–æ–º'</b>\n\n"
                                                f"–ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!\n\n",
                                                reply_markup=InlineKeyboardMarkup(
                                                    [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                                           callback_data='back_to_my_service_packets_menu')]],
                                                    resize_keyboard=True),
                                                parse_mode='HTML')
    elif context.user_data[DATA] == "edit_standart":
        service_id = context.user_data[SELECT_SERV_ID]
        service = get_service_by_id(service_id)
        service.update(standart_description=None, standart_price=None)
        update.callback_query.edit_message_text(f"{e_pencil}   <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ '–°—Ç–∞–Ω–¥–∞—Ä—Ç'</b>\n\n"
                                                f"–ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!\n\n",
                                                reply_markup=InlineKeyboardMarkup(
                                                    [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                                           callback_data='back_to_my_service_packets_menu')]],
                                                    resize_keyboard=True),
                                                parse_mode='HTML')
    elif context.user_data[DATA] == "edit_biz":
        service_id = context.user_data[SELECT_SERV_ID]
        service = get_service_by_id(service_id)
        service.update(biz_description=None, biz_price=None)
        update.callback_query.edit_message_text(f"{e_pencil}   <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ '–ë–∏–∑–Ω–µ—Å'</b>\n\n"
                                                f"–ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!\n\n",
                                                reply_markup=InlineKeyboardMarkup(
                                                    [[InlineKeyboardButton(f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                                           callback_data='back_to_my_service_packets_menu')]],
                                                    resize_keyboard=True),
                                                parse_mode='HTML')
    context.user_data[CATEGORY_INFO]['cat_id'] = context.user_data[CATEGORY_INFO]['cat_id']
    context.user_data[CATEGORY_INFO]['cat_path'] = context.user_data[CATEGORY_INFO]['cat_path']


# -------------- –ù–ê–°–¢–†–û–ô–ö–ò ------------------------
def button_my_shop_submenu_settings(update, context):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    shop = get_shop_obj(owner_id)
    if shop.terms_trade is None:
        terms_text = "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    else:
        terms_text = shop.terms_trade
    update.callback_query.edit_message_text(f'{e_wrench}   <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n'
                                            f'<b>‚è±  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–∞:</b> {shop.check_buyer_time // 60} –º–∏–Ω—É—Ç\n'
                                            f'<b>üìë  –£—Å–ª–æ–≤–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {terms_text}',
                                            reply_markup=InlineKeyboardMarkup(get_my_shop_submenu_settings(shop),
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_settings_stop(update, context):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    shop = get_shop_obj(owner_id)
    count_deals = count_open_deals(owner_id)
    if shop.guarantee > 0 or count_deals > 0:
        return context.bot.sendMessage(owner_id,
                                       "–ü–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ <b>–í—ã–≤–µ—Å—Ç–∏ –≥–∞—Ä–∞–Ω—Ç</b> –∏ <b>–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏</b>!",
                                       parse_mode='HTML')
    update.callback_query.edit_message_text(f'{e_cross_mark}   <b>–ó–∞–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω</b>\n\n'
                                            f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω?\n\n'
                                            f'–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –±—É–¥–µ—Ç <b>–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ</b>!',
                                            reply_markup=InlineKeyboardMarkup(my_shop_setting_stop_confirmation,
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


def button_my_shop_settings_stop_confirmed(update, context):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    shop_stop(owner_id, True)
    context.bot.sendMessage(owner_id, f'<b>–†–∞–±–æ—Ç–∞ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>',
                            reply_markup=update_main_menu(owner_id), parse_mode='HTML')


def button_my_shop_settings_pause_trade(update, context):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    shop = get_shop_obj(owner_id)
    if not shop.pause_trade:
        update.callback_query.edit_message_text(
            "–¢–æ—Ä–≥–æ–≤–ª—è —É—Å–ø–µ—à–Ω–æ <i>–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</i>, –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã <b>–Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è</b> –Ω–∞ "
            "–†—ã–Ω–∫–µ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    f'{back_for_button}  –ù–∞–∑–∞–¥',
                    callback_data='back_to_my_shop_submenu_settings')]],
                resize_keyboard=True),
            parse_mode='HTML')
        shop.update(pause_trade=True)
    else:
        update.callback_query.edit_message_text(
            "–¢–æ—Ä–≥–æ–≤–ª—è —É—Å–ø–µ—à–Ω–æ <i>–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞</i>, –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã <b>—Å–Ω–æ–≤–∞ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è</b> –Ω–∞ "
            "–†—ã–Ω–∫–µ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    f'{back_for_button}  –ù–∞–∑–∞–¥',
                    callback_data='back_to_my_shop_submenu_settings')]],
                resize_keyboard=True),
            parse_mode='HTML')
        shop.update(pause_trade=False)


def button_my_shop_settings_terms(update, context):
    query = update.callback_query
    query.answer()
    owner_id = query.message.chat.id
    shop = get_shop_obj(owner_id)
    terms = shop.terms_trade
    if terms is None:
        terms = "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    update.callback_query.edit_message_text(f'<b>üìë  –£—Å–ª–æ–≤–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\n\n'
                                            f'–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —É—Å–ª–æ–≤–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –≤–∞—à–∏–º –º–∞–≥–∞–∑–∏–Ω–æ–º\n\n'
                                            f'–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –∫—Ä–∞—Ç–∫–∏–π —Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥.\n\n'
                                            f'<b>‚úÖ  –ü—Ä–∏–º–µ—Ä:</b> 1.1 –ü—Ä–æ–¥–∞–Ω–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, –∫—É–ø–æ–Ω –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç (–ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ—Å—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞)\n'
                                            f'1.2 –°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∫–∏—Ö –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∫—É–ø–ª–µ–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ (–∞–∫–∫–∞—É–Ω—Ç–∞—Ö) –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º, –≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –æ –∑–∞–º–µ–Ω–µ –ø–æ –∫–∞–∫–∏–º –ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–∞–º. –í —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –≤ –∑–∞–º–µ–Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫–∞–∑–∞–Ω–æ....–∏ —Ç.–¥\n\n'
                                            f'<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤:</b> 3000\n\n'
                                            f'<b>–¢–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {terms}',
                                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è",
                                                                                                     callback_data='change_terms_trade')],
                                                                               [InlineKeyboardButton(
                                                                                   f'{back_for_button}  –ù–∞–∑–∞–¥',
                                                                                   callback_data='back_to_my_shop_submenu_settings')]],
                                                                              resize_keyboard=True),
                                            parse_mode='HTML')


# ============================================= –û–ë–©–ò–ï ============================================================

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —Å–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def button_switcher_list_page(update, context):
    query = update.callback_query
    query.answer()
    text = ""
    if PAGE_INDEX not in context.user_data:
        context.user_data[PAGE_INDEX] = 1
    if query.data[26:30] == "next":
        context.user_data[PAGE_INDEX] += 1
    elif query.data[26:30] == "prev":
        context.user_data[PAGE_INDEX] -= 1
    if DATA not in context.user_data:
        return update.callback_query.edit_message_text("–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")

    # –°–ü–ò–°–û–ö –í –ö–ù–û–ü–ö–ê–•
    if context.user_data[DATA] == "requests":
        text = "–ó–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ"
        update.callback_query.edit_message_text(
            f"<b>{text}</b>  ",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, context.user_data[DATA]),
                                              resize_keyboard=True),
            parse_mode='HTML')
    elif context.user_data[DATA] == "shops":
        text = "–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤"
        update.callback_query.edit_message_text(
            f"<b>{text}</b>  ",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, context.user_data[DATA]),
                                              resize_keyboard=True),
            parse_mode='HTML')
    elif context.user_data[DATA] == "requisites":
        text = "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"
        update.callback_query.edit_message_text(
            f"<b>{text}</b>  ",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, context.user_data[DATA]),
                                              resize_keyboard=True),
            parse_mode='HTML')
    elif context.user_data[DATA] == "my_buys":
        text = "–ú–æ–∏ —Å–¥–µ–ª–∫–∏ (—Ç–æ–≤–∞—Ä—ã)"
        update.callback_query.edit_message_text(
            f"<b>{text}</b>  ",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, context.user_data[DATA]),
                                              resize_keyboard=True),
            parse_mode='HTML')
    elif context.user_data[DATA] == "my_sales":
        text = f"{e_shopping_bags}  –ü—Ä–æ–¥–∞–∂–∏"
        update.callback_query.edit_message_text(
            f"<b>{text}</b>  ",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, context.user_data[DATA]),
                                              resize_keyboard=True),
            parse_mode='HTML')
    elif context.user_data[DATA] == "moder_shop_sales":
        shop_id = context.user_data[SELECT_ID]
        text = f"–°–¥–µ–ª–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ {get_shop_name(shop_id)}  ({get_shop_id(shop_id)}) (—Ç–æ–≤–∞—Ä—ã)"
        update.callback_query.edit_message_text(
            f"<b>{text}</b>  ",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, context.user_data[DATA]),
                                              resize_keyboard=True),
            parse_mode='HTML')
    elif context.user_data[DATA] == "moder_user_buys":
        user_id = context.user_data[SELECT_ID]
        text = f"–°–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_user_name(user_id)}  ({get_user_id(user_id)}) (—Ç–æ–≤–∞—Ä—ã)"
        update.callback_query.edit_message_text(
            f"<b>{text}</b>  ",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, context.user_data[DATA]),
                                              resize_keyboard=True),
            parse_mode='HTML')
    elif context.user_data[DATA] == "deal_moder_call_":
        text = "–°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ (—Å–¥–µ–ª–∫–∏)"
        update.callback_query.edit_message_text(
            f"<b>{text}</b>  ",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, context.user_data[DATA]),
                                              resize_keyboard=True),
            parse_mode='HTML')
    elif context.user_data[DATA] == "order_moder_call_":
        text = "–°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ (–∑–∞–∫–∞–∑—ã)"
        update.callback_query.edit_message_text(
            f"<b>{text}</b>  ",
            reply_markup=InlineKeyboardMarkup(show_list_menu(update, context, context.user_data[DATA]),
                                              resize_keyboard=True),
            parse_mode='HTML')

    # –°–ü–ò–°–û–ö –í –¢–ï–ö–°–¢–ï
    if context.user_data[DATA] == "user_payments" or context.user_data[DATA] == "shop_operations" or context.user_data[
        DATA] == "shop_comments" or context.user_data[DATA] == "shop_services_comments" or context.user_data[
        DATA] == "shop_products_comments":
        show_list_text(update, context, context.user_data[DATA])
